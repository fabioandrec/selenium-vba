using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using System.ComponentModel;

namespace SeleniumWrapper
{
    public partial interface IWebDriver
    {
        // Following funtion are automatically generated by reflexion
        #region Auto-Generated Code
		[Description("Waits for a new page to load. You can use this command instead of the \"AndWait\" suffixes, \"clickAndWait\", \"selectAndWait\", \"typeAndWait\" etc. (which are only available in the JS API).Selenium constantly keeps track of new pages loading, and sets a \"newPageLoaded\" flag when it first notices a page load. Running any other Selenium command after turns the flag to false. Hence, if you want to wait for a page to load, you must wait immediately after a Selenium command that caused a page-load.a timeout in milliseconds, after which this command will return with an error")]
		void waitForPageToLoad(Object timeoutms);
		[Description("Waits for a new frame to load. Selenium constantly keeps track of new pages and frames loading, and sets a \"newPageLoaded\" flag when it first notices a page load. See waitForPageToLoad for more information. FrameAddress from the server sidea timeout in milliseconds, after which this command will return with an error")]
		void waitForFrameToLoad(String frameAddress, Object timeoutms);
		[Description("Return all cookies of the current page under test. all cookies of the current page under test")]
		String getCookie();
		void assertCookie(String expected);
		void assertNotCookie(String expected);
		String verifyCookie(String expected);
		String verifyNotCookie(String expected);
		void waitForCookie(String expected);
		void waitForNotCookie(String expected);
		[Description("Returns the value of the cookie with the specified name, or throws an error if the cookie is not present. the name of the cookiethe value of the cookie")]
		String getCookieByName(String name);
		void assertCookieByName(String name, String expected);
		void assertNotCookieByName(String name, String expected);
		String verifyCookieByName(String name, String expected);
		String verifyNotCookieByName(String name, String expected);
		void waitForCookieByName(String name, String expected);
		void waitForNotCookieByName(String name, String expected);
		[Description("Returns true if a cookie with the specified name is present, or false otherwise. the name of the cookietrue if a cookie with the specified name is present, or false otherwise.")]
		Boolean isCookiePresent(String name);
		void assertCookiePresent(String name);
		String verifyCookiePresent(String name);
		void waitForCookiePresent(String name);
		void assertCookieNotPresent(String name);
		String verifyCookieNotPresent(String name);
		void waitForCookieNotPresent(String name);
		[Description("Create a new cookie whose path and domain are same with those of current page under test, unless you specified a path for this cookie explicitly. name and value of the cookie in a format \"name=value\"options for the cookie. Currently supported options include 'path', 'max_age' and 'domain'. the optionsString's format is \"path=/path/, max_age=60, domain=.foo.com\". The order of options are irrelevant, the unit of the value of 'max_age' is second. Note that specifying a domain that isn't a subset of the current domain will usually fail.")]
		void createCookie(String nameValuePair, String optionsString);
		[Description("Delete a named cookie with specified path and domain. Be careful; to delete a cookie, you need to delete it using the exact same path and domain that were used to create the cookie. If the path is wrong, or the domain is wrong, the cookie simply won't be deleted. Also note that specifying a domain that isn't a subset of the current domain will usually fail. Since there's no way to discover at runtime the original path and domain of a given cookie, we've added an option called 'recurse' to try all sub-domains of the current domain with all paths that are a subset of the current path. Beware; this option can be slow. In big-O notation, it operates in O(n*m) time, where n is the number of dots in the domain name and m is the number of slashes in the path. the name of the cookie to be deletedoptions for the cookie. Currently supported options include 'path', 'domain' and 'recurse.' The optionsString's format is \"path=/path/, domain=.foo.com, recurse=true\". The order of options are irrelevant. Note that specifying a domain that isn't a subset of the current domain will usually fail.")]
		void deleteCookie(String name, String optionsString);
		[Description("Calls deleteCookie with recurse=true on all cookies visible to the current page. As noted on the documentation for deleteCookie, recurse=true can be much slower than simply deleting the cookies using a known domain/path. ")]
		void deleteAllVisibleCookies();
		[Description("Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded. Valid logLevel strings are: \"debug\", \"info\", \"warn\", \"error\" or \"off\". To see the browser logs, you need to either show the log window in GUI mode, or enable browser-side logging in Selenium RC. one of the following: \"debug\", \"info\", \"warn\", \"error\" or \"off\"")]
		void setBrowserLogLevel(String logLevel);
		[Description("Creates a new \"script\" tag in the body of the current test window, and adds the specified text into the body of the command. Scripts run in this way can often be debugged more easily than scripts executed using Selenium's \"getEval\" command. Beware that JS exceptions thrown in these script tags aren't managed by Selenium, so you should probably wrap your script in try/catch blocks if there is any chance that the script will throw an exception. the JavaScript snippet to run")]
		void runScript(String script);
		void runScriptAndWait(String script);
		[Description("Defines a new function for Selenium to locate elements on the page. For example, if you define the strategy \"foo\", and someone runs click(\"foo=blah\"), we'll run your function, passing you the string \"blah\", and click on the element that your function returns, or throw an \"Element not found\" error if your function returns null. We'll pass three arguments to your function: locator: the string the user passed ininWindow: the currently selected windowinDocument: the currently selected document The function must return null if the element can't be found. the name of the strategy to define; this should use only letters [a-zA-Z] with no spaces or other punctuation.a string defining the body of a function in JavaScript. For example: return inDocument.getElementById(locator);")]
		void addLocationStrategy(String strategyName, String functionDefinition);
		void addLocationStrategyAndWait(String strategyName, String functionDefinition);
		[Description("Executes a command rollup, which is a series of commands with a unique name, and optionally arguments that control the generation of the set of commands. If any one of the rolled-up commands fails, the rollup is considered to have failed. Rollups may also contain nested rollups. the name of the rollup commandkeyword arguments string that influences how the rollup expands into commands")]
		void rollup(String rollupName, String kwargs);
		void rollupAndWait(String rollupName, String kwargs);
		[Description("Loads script content into a new script tag in the Selenium document. This differs from the runScript command in that runScript adds the script tag to the document of the AUT, not the Selenium document. The following entities in the script content are replaced by the characters they represent: < > & The corresponding remove command is removeScript. the Javascript content of the script to add(optional) the id of the new script tag. If specified, and an element with this id already exists, this operation will fail.")]
		void addScript(String scriptContent, String scriptTagId);
		void addScriptAndWait(String scriptContent, String scriptTagId);
		[Description("Removes a script tag from the Selenium document identified by the given id. Does nothing if the referenced tag doesn't exist. the id of the script element to remove.")]
		void removeScript(String scriptTagId);
		void removeScriptAndWait(String scriptTagId);
		[Description("Allows choice of one of the available libraries. name of the desired library Only the following three can be chosen: \"ajaxslt\" - Google's library\"javascript-xpath\" - Cybozu Labs' faster library\"default\" - The default library. Currently the default library is \"ajaxslt\" . If libraryName isn't one of these three, then no change will be made.")]
		void useXpathLibrary(String libraryName);
		void useXpathLibraryAndWait(String libraryName);
		[Description("Writes a message to the status bar and adds a note to the browser-side log. the message to be sent to the browser")]
		void setContext(String context);
		[Description("Sets a file input (upload) field to the file listed in fileLocator an element locatora URL pointing to the specified file. Before the file can be set in the input field (fieldLocator), Selenium RC may need to transfer the file to the local machine before attaching the file in a web page form. This is common in selenium grid configurations where the RC server driving the browser is not the same machine that started the test. Supported Browsers: Firefox (\"*chrome\") only.")]
		void attachFile(String fieldLocator, String fileLocator);
		void attachFileAndWait(String fieldLocator, String fileLocator);
		[Description("Capture a PNG screenshot. It then returns the file as a base 64 encoded string. The base 64 encoded string of the screen shot (PNG file)")]
		String captureScreenshotToString();
		[Description(" Captures the Network Traffic that is passing through Selenium Server ")]
		String captureNetworkTraffic(String type);
		[Description("Retrieve the last messages logged on a specific remote control. Useful for error reports, especially when running multiple remote controls in a distributed environment. The maximum number of log messages that can be retrieve is configured on remote control startup. The last N log messages as a multi-line string.")]
		String retrieveLastRemoteControlLogs();
		[Description("Simulates a user pressing a key (without releasing it yet) by sending a native operating system keystroke. This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing a key on the keyboard. It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and metaKeyDown commands, and does not target any particular HTML element. To send a keystroke to a particular element, focus on the element first before running this command. an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!")]
		void keyDownNative(String keycode);
		void keyDownNativeAndWait(String keycode);
		[Description("Simulates a user releasing a key by sending a native operating system keystroke. This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing a key on the keyboard. It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and metaKeyDown commands, and does not target any particular HTML element. To send a keystroke to a particular element, focus on the element first before running this command. an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!")]
		void keyUpNative(String keycode);
		void keyUpNativeAndWait(String keycode);
		[Description("Simulates a user pressing and releasing a key by sending a native operating system keystroke. This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing a key on the keyboard. It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and metaKeyDown commands, and does not target any particular HTML element. To send a keystroke to a particular element, focus on the element first before running this command. an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!")]
		void keyPressNative(String keycode);
		void keyPressNativeAndWait(String keycode);
		[Description(" Sets the extension Javascript for the session ")]
		void setExtensionJs(String extensionJs);
		[Description("Clicks on a link, button, checkbox or radio button. If the click action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locator")]
		void click(String locator);
		void clickAndWait(String locator);
		[Description("Double clicks on a link, button, checkbox or radio button. If the double click action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locator")]
		void doubleClick(String locator);
		void doubleClickAndWait(String locator);
		[Description("Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element). an element locator")]
		void contextMenu(String locator);
		void contextMenuAndWait(String locator);
		[Description("Clicks on a link, button, checkbox or radio button. If the click action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void clickAt(String locator, String coordString);
		void clickAtAndWait(String locator, String coordString);
		[Description("Doubleclicks on a link, button, checkbox or radio button. If the action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void doubleClickAt(String locator, String coordString);
		void doubleClickAtAndWait(String locator, String coordString);
		[Description("Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element). an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void contextMenuAt(String locator, String coordString);
		void contextMenuAtAndWait(String locator, String coordString);
		[Description("Explicitly simulate an event, to trigger the corresponding \"onevent\" handler. an element locatorthe event name, e.g. \"focus\" or \"blur\"")]
		void fireEvent(String locator, String eventName);
		void fireEventAndWait(String locator, String eventName);
		[Description("Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field. an element locator")]
		void focus(String locator);
		void focusAndWait(String locator);
		[Description("Simulates a user pressing and releasing a key. an element locatorEither be a string(\"\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: \"w\", \"\\119\".")]
		void keyPress(String locator, String keySequence);
		void keyPressAndWait(String locator, String keySequence);
		[Description("Press the shift key and hold it down until doShiftUp() is called or a new page is loaded. ")]
		void shiftKeyDown();
		void shiftKeyDownAndWait();
		[Description("Release the shift key. ")]
		void shiftKeyUp();
		void shiftKeyUpAndWait();
		[Description("Press the meta key and hold it down until doMetaUp() is called or a new page is loaded. ")]
		void metaKeyDown();
		void metaKeyDownAndWait();
		[Description("Release the meta key. ")]
		void metaKeyUp();
		void metaKeyUpAndWait();
		[Description("Press the alt key and hold it down until doAltUp() is called or a new page is loaded. ")]
		void altKeyDown();
		void altKeyDownAndWait();
		[Description("Release the alt key. ")]
		void altKeyUp();
		void altKeyUpAndWait();
		[Description("Press the control key and hold it down until doControlUp() is called or a new page is loaded. ")]
		void controlKeyDown();
		void controlKeyDownAndWait();
		[Description("Release the control key. ")]
		void controlKeyUp();
		void controlKeyUpAndWait();
		[Description("Simulates a user pressing a key (without releasing it yet). an element locatorEither be a string(\"\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: \"w\", \"\\119\".")]
		void keyDown(String locator, String keySequence);
		void keyDownAndWait(String locator, String keySequence);
		[Description("Simulates a user releasing a key. an element locatorEither be a string(\"\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: \"w\", \"\\119\".")]
		void keyUp(String locator, String keySequence);
		void keyUpAndWait(String locator, String keySequence);
		[Description("Simulates a user hovering a mouse over the specified element. an element locator")]
		void mouseOver(String locator);
		void mouseOverAndWait(String locator);
		[Description("Simulates a user moving the mouse pointer away from the specified element. an element locator")]
		void mouseOut(String locator);
		void mouseOutAndWait(String locator);
		[Description("Simulates a user pressing the left mouse button (without releasing it yet) on the specified element. an element locator")]
		void mouseDown(String locator);
		void mouseDownAndWait(String locator);
		[Description("Simulates a user pressing the right mouse button (without releasing it yet) on the specified element. an element locator")]
		void mouseDownRight(String locator);
		void mouseDownRightAndWait(String locator);
		[Description("Simulates a user pressing the left mouse button (without releasing it yet) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void mouseDownAt(String locator, String coordString);
		void mouseDownAtAndWait(String locator, String coordString);
		[Description("Simulates a user pressing the right mouse button (without releasing it yet) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void mouseDownRightAt(String locator, String coordString);
		void mouseDownRightAtAndWait(String locator, String coordString);
		[Description("Simulates the event that occurs when the user releases the mouse button (i.e., stops holding the button down) on the specified element. an element locator")]
		void mouseUp(String locator);
		void mouseUpAndWait(String locator);
		[Description("Simulates the event that occurs when the user releases the right mouse button (i.e., stops holding the button down) on the specified element. an element locator")]
		void mouseUpRight(String locator);
		void mouseUpRightAndWait(String locator);
		[Description("Simulates the event that occurs when the user releases the mouse button (i.e., stops holding the button down) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void mouseUpAt(String locator, String coordString);
		void mouseUpAtAndWait(String locator, String coordString);
		[Description("Simulates the event that occurs when the user releases the right mouse button (i.e., stops holding the button down) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void mouseUpRightAt(String locator, String coordString);
		void mouseUpRightAtAndWait(String locator, String coordString);
		[Description("Simulates a user pressing the mouse button (without releasing it yet) on the specified element. an element locator")]
		void mouseMove(String locator);
		void mouseMoveAndWait(String locator);
		[Description("Simulates a user pressing the mouse button (without releasing it yet) on the specified element. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.")]
		void mouseMoveAt(String locator, String coordString);
		void mouseMoveAtAndWait(String locator, String coordString);
		[Description("Sets the value of an input field, as though you typed it in. Can also be used to set the value of combo boxes, check boxes, etc. In these cases, value should be the value of the option selected, not the visible text.an element locatorthe value to type")]
		void type(String locator, String value);
		void typeAndWait(String locator, String value);
		[Description("Simulates keystroke events on the specified element, as though you typed the value key-by-key. This is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string; this is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.Unlike the simple \"type\" command, which forces the specified value into the page directly, this command may or may not have any visible effect, even in cases where typing keys would normally have a visible effect. For example, if you use \"typeKeys\" on a form element, you may or may not see the results of what you typed in the field.In some cases, you may need to use the simple \"type\" command to set the value of the field and then the \"typeKeys\" command to send the keystroke events corresponding to what you just typed.an element locatorthe value to type")]
		void typeKeys(String locator, String value);
		void typeKeysAndWait(String locator, String value);
		[Description("Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation). By default, there is no such delay, i.e., the delay is 0 milliseconds. the number of milliseconds to pause after operation")]
		void setSpeed(String value);
		[Description("Get execution speed (i.e., get the millisecond length of the delay following each selenium operation). By default, there is no such delay, i.e., the delay is 0 milliseconds. See also setSpeed. the execution speed in milliseconds.")]
		String getSpeed();
		void assertSpeed(String expected);
		void assertNotSpeed(String expected);
		String verifySpeed(String expected);
		String verifyNotSpeed(String expected);
		void waitForSpeed(String expected);
		void waitForNotSpeed(String expected);
		[Description("Check a toggle-button (checkbox/radio) an element locator")]
		void check(String locator);
		void checkAndWait(String locator);
		[Description("Uncheck a toggle-button (checkbox/radio) an element locator")]
		void uncheck(String locator);
		void uncheckAndWait(String locator);
		[Description("Select an option from a drop-down using an option locator. Option locators provide different ways of specifying options of an HTML Select element (e.g. for selecting a specific option, or for asserting that the selected option satisfies a specification). There are several forms of Select Option Locator. label=labelPattern: matches options based on their labels, i.e. the visible text. (This is the default.) label=regexp:^[Oo]thervalue=valuePattern: matches options based on their values. value=otherid=id: matches options based on their ids. id=option1index=index: matches an option based on its index (offset from zero). index=2 If no option locator prefix is provided, the default behaviour is to match on label. an element locator identifying a drop-down menuan option locator (a label by default)")]
		void select(String selectLocator, String optionLocator);
		void selectAndWait(String selectLocator, String optionLocator);
		[Description("Add a selection to the set of selected options in a multi-select element using an option locator. @see #doSelect for details of option locators an element locator identifying a multi-select boxan option locator (a label by default)")]
		void addSelection(String locator, String optionLocator);
		void addSelectionAndWait(String locator, String optionLocator);
		[Description("Remove a selection from the set of selected options in a multi-select element using an option locator. @see #doSelect for details of option locators an element locator identifying a multi-select boxan option locator (a label by default)")]
		void removeSelection(String locator, String optionLocator);
		void removeSelectionAndWait(String locator, String optionLocator);
		[Description("Unselects all of the selected options in a multi-select element. an element locator identifying a multi-select box")]
		void removeAllSelections(String locator);
		void removeAllSelectionsAndWait(String locator);
		[Description("Submit the specified form. This is particularly useful for forms without submit buttons, e.g. single-input \"Search\" forms. an element locator for the form you want to submit")]
		void submit(String formLocator);
		void submitAndWait(String formLocator);
		[Description("Opens a popup window (if a window with that ID isn't already open). After opening the window, you'll need to select it using the selectWindow command. This command can also be a useful workaround for bug SEL-339. In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example). In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using an empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").the URL to open, which can be blankthe JavaScript window ID of the window to select")]
		void openWindow(String url, String windowID);
		[Description("Selects a popup window using a window locator; once a popup window has been selected, all commands go to that window. To select the main window again, use null as the target. Window locators provide different ways of specifying the window object: by title, by internal JavaScript \"name,\" or by JavaScript variable. title=My Special Window: Finds the window using the text that appears in the title bar. Be careful; two windows can share the same title. If that happens, this locator will just pick one. name=myWindow: Finds the window using its internal JavaScript \"name\" property. This is the second parameter \"windowName\" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag) (which Selenium intercepts). var=variableName: Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current application window, e.g. \"window.foo = window.open(url);\". In those cases, you can open the window using \"var=foo\". If no window locator prefix is provided, we'll try to guess what you mean like this:1.) if windowID is null, (or the string \"null\") then it is assumed the user is referring to the original window instantiated by the browser).2.) if the value of the \"windowID\" parameter is a JavaScript variable name in the current application window, then it is assumed that this variable contains the return value from a call to the JavaScript window.open() method.3.) Otherwise, selenium looks in a hash it maintains that maps string names to window \"names\".4.) If that fails, we'll try looping over all of the known windows to try to find the appropriate \"title\". Since \"title\" is not necessarily unique, this may have unexpected behavior.If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages which identify the names of windows created via window.open (and therefore intercepted by Selenium). You will see messages like the following for each window as it is opened:debug: window.open call intercepted; window ID (which you can use with selectWindow()) is \"myNewWindow\"In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example). (This is bug SEL-339.) In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using an empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").the JavaScript window ID of the window to select")]
		void selectWindow(String windowID);
		[Description("Simplifies the process of selecting a popup window (and does not offer functionality beyond what selectWindow() already provides). If windowID is either not specified, or specified as \"null\", the first non-top window is selected. The top window is the one that would be selected by selectWindow() without providing a windowID . This should not be used when more than one popup window is in play.Otherwise, the window will be looked up considering windowID as the following in order: 1) the \"name\" of the window, as specified to window.open(); 2) a javascript variable which is a reference to a window; and 3) the title of the window. This is the same ordered lookup performed by selectWindow .an identifier for the popup window, which can take on a number of different meanings")]
		void selectPopUp(String windowID);
		void selectPopUpAndWait(String windowID);
		[Description("Selects the main window. Functionally equivalent to using selectWindow() and specifying no value for windowID. ")]
		void deselectPopUp();
		void deselectPopUpAndWait();
		[Description("Selects a frame within the current window. (You may invoke this command multiple times to select nested frames.) To select the parent frame, use \"relative=parent\" as a locator; to select the top frame, use \"relative=top\". You can also select a frame by its 0-based index number; select the first frame with \"index=0\", or the third frame with \"index=2\". You may also use a DOM expression to identify the frame you want directly, like this: dom=frames[\"main\"].frames[\"subframe\"]an element locator identifying a frame or iframe")]
		void selectFrame(String locator);
		[Description("Determine whether current/locator identify the frame containing this running code. This is useful in proxy injection mode, where this code runs in every browser frame and window, and sometimes the selenium server needs to identify the \"current\" frame. In this case, when the test calls selectFrame, this routine is called for each frame to figure out which one has been selected. The selected frame will return true, while all others will return false.starting framenew frame (which might be relative to the current one)true if the new frame is this code's window")]
		Boolean getWhetherThisFrameMatchFrameExpression(String currentFrameString, String target);
		void assertWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected);
		void assertNotWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected);
		String verifyWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected);
		String verifyNotWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected);
		void waitForWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected);
		void waitForNotWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected);
		[Description("Determine whether currentWindowString plus target identify the window containing this running code. This is useful in proxy injection mode, where this code runs in every browser frame and window, and sometimes the selenium server needs to identify the \"current\" window. In this case, when the test calls selectWindow, this routine is called for each window to figure out which one has been selected. The selected window will return true, while all others will return false.starting windownew window (which might be relative to the current one, e.g., \"_parent\")true if the new window is this code's window")]
		Boolean getWhetherThisWindowMatchWindowExpression(String currentWindowString, String target);
		void assertWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected);
		void assertNotWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected);
		String verifyWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected);
		String verifyNotWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected);
		void waitForWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected);
		void waitForNotWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected);
		[Description("Waits for a popup window to appear and load up. the JavaScript window \"name\" of the window that will appear (not the text of the title bar) If unspecified, or specified as \"null\", this command will wait for the first non-top window to appear (don't rely on this if you are working with multiple popups simultaneously).a timeout in milliseconds, after which the action will return with an error. If this value is not specified, the default Selenium timeout will be used. See the setTimeout() command.")]
		void waitForPopUp(String windowID, Object timeoutms);
		[Description("Instructs Selenium to return the specified answer string in response to the next JavaScript prompt [window.prompt()]. the answer to give in response to the prompt pop-up")]
		void answerOnNextPrompt(String answer);
		[Description("Simulates the user clicking the \"back\" button on their browser. ")]
		void goBack();
		void goBackAndWait();
		[Description("Simulates the user clicking the \"Refresh\" button on their browser. ")]
		void refresh();
		void refreshAndWait();
		[Description("Has an alert occurred? This function never throws an exception true if there is an alert")]
		Boolean isAlertPresent();
		void assertAlertPresent();
		String verifyAlertPresent();
		void waitForAlertPresent();
		void assertAlertNotPresent();
		String verifyAlertNotPresent();
		void waitForAlertNotPresent();
		[Description("Has a prompt occurred? This function never throws an exception true if there is a pending prompt")]
		Boolean isPromptPresent();
		void assertPromptPresent();
		String verifyPromptPresent();
		void waitForPromptPresent();
		void assertPromptNotPresent();
		String verifyPromptNotPresent();
		void waitForPromptNotPresent();
		[Description("Has confirm() been called? This function never throws an exception true if there is a pending confirmation")]
		Boolean isConfirmationPresent();
		void assertConfirmationPresent();
		String verifyConfirmationPresent();
		void waitForConfirmationPresent();
		void assertConfirmationNotPresent();
		String verifyConfirmationNotPresent();
		void waitForConfirmationNotPresent();
		[Description("Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts. Getting an alert has the same effect as manually clicking OK. If an alert is generated but you do not consume it with getAlert, the next Selenium action will fail.Under Selenium, JavaScript alerts will NOT pop up a visible alert dialog.Selenium does NOT support JavaScript alerts that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until someone manually clicks OK.The message of the most recent JavaScript alert")]
		String getAlert();
		void assertAlert(String expected);
		void assertNotAlert(String expected);
		String verifyAlert(String expected);
		String verifyNotAlert(String expected);
		void waitForAlert(String expected);
		void waitForNotAlert(String expected);
		[Description("Retrieves the message of a JavaScript confirmation dialog generated during the previous action. By default, the confirm function will return true, having the same effect as manually clicking OK. This can be changed by prior execution of the chooseCancelOnNextConfirmation command. If an confirmation is generated but you do not consume it with getConfirmation, the next Selenium action will fail. NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible dialog. NOTE: Selenium does NOT support JavaScript confirmations that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until you manually click OK. the message of the most recent JavaScript confirmation dialog")]
		String getConfirmation();
		void assertConfirmation(String expected);
		void assertNotConfirmation(String expected);
		String verifyConfirmation(String expected);
		String verifyNotConfirmation(String expected);
		void waitForConfirmation(String expected);
		void waitForNotConfirmation(String expected);
		[Description("Retrieves the message of a JavaScript question prompt dialog generated during the previous action. Successful handling of the prompt requires prior execution of the answerOnNextPrompt command. If a prompt is generated but you do not get/verify it, the next Selenium action will fail.NOTE: under Selenium, JavaScript prompts will NOT pop up a visible dialog.NOTE: Selenium does NOT support JavaScript prompts that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until someone manually clicks OK.the message of the most recent JavaScript question prompt")]
		String getPrompt();
		void assertPrompt(String expected);
		void assertNotPrompt(String expected);
		String verifyPrompt(String expected);
		String verifyNotPrompt(String expected);
		void waitForPrompt(String expected);
		void waitForNotPrompt(String expected);
		[Description("Gets the absolute URL of the current page. the absolute URL of the current page")]
		String getLocation();
		void assertLocation(String expected);
		void assertNotLocation(String expected);
		String verifyLocation(String expected);
		String verifyNotLocation(String expected);
		void waitForLocation(String expected);
		void waitForNotLocation(String expected);
		[Description("Gets the title of the current page. the title of the current page")]
		String getTitle();
		void assertTitle(String expected);
		void assertNotTitle(String expected);
		String verifyTitle(String expected);
		String verifyNotTitle(String expected);
		void waitForTitle(String expected);
		void waitForNotTitle(String expected);
		[Description("Gets the entire text of the page. the entire text of the page")]
		String getBodyText();
		void assertBodyText(String expected);
		void assertNotBodyText(String expected);
		String verifyBodyText(String expected);
		String verifyNotBodyText(String expected);
		void waitForBodyText(String expected);
		void waitForNotBodyText(String expected);
		[Description("Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter). For checkbox/radio elements, the value will be \"on\" or \"off\" depending on whether the element is checked or not. an element locatorthe element value, or \"on/off\" for checkbox/radio elements")]
		String getValue(String locator);
		void assertValue(String locator, String expected);
		void assertNotValue(String locator, String expected);
		String verifyValue(String locator, String expected);
		String verifyNotValue(String locator, String expected);
		void waitForValue(String locator, String expected);
		void waitForNotValue(String locator, String expected);
		[Description("Gets the text of an element. This works for any element that contains text. This command uses either the textContent (Mozilla-like browsers) or the innerText (IE-like browsers) of the element, which is the rendered text shown to the user. an element locatorthe text of the element")]
		String getText(String locator);
		void assertText(String locator, String expected);
		void assertNotText(String locator, String expected);
		String verifyText(String locator, String expected);
		String verifyNotText(String locator, String expected);
		void waitForText(String locator, String expected);
		void waitForNotText(String locator, String expected);
		[Description("Briefly changes the backgroundColor of the specified element yellow. Useful for debugging. an element locator")]
		void highlight(String locator);
		void highlightAndWait(String locator);
		[Description("Gets the result of evaluating the specified JavaScript snippet. The snippet may have multiple lines, but only the result of the last line will be returned. Note that, by default, the snippet will run in the context of the \"selenium\" object itself, so this will refer to the Selenium object. Use window to refer to the window of your application, e.g. window.document.getElementById('foo')If you need to use a locator to refer to a single element in your application page, you can use this.browserbot.findElement(\"id=foo\") where \"id=foo\" is your locator.the JavaScript snippet to runthe results of evaluating the snippet")]
		String getEval(String script);
		void assertEval(String script, String expected);
		void assertNotEval(String script, String expected);
		String verifyEval(String script, String expected);
		String verifyNotEval(String script, String expected);
		void waitForEval(String script, String expected);
		void waitForNotEval(String script, String expected);
		[Description("Gets whether a toggle-button (checkbox/radio) is checked. Fails if the specified element doesn't exist or isn't a toggle-button. an element locator pointing to a checkbox or radio buttontrue if the checkbox is checked, false otherwise")]
		Boolean isChecked(String locator);
		void assertChecked(String locator);
		String verifyChecked(String locator);
		void waitForChecked(String locator);
		void assertNotChecked(String locator);
		String verifyNotChecked(String locator);
		void waitForNotChecked(String locator);
		[Description("Gets the text from a cell of a table. The cellAddress syntax tableLocator.row.column, where row and column start at 0. a cell address, e.g. \"foo.1.4\"the text from the specified cell")]
		String getTable(String tableCellAddress);
		void assertTable(String tableCellAddress, String expected);
		void assertNotTable(String tableCellAddress, String expected);
		String verifyTable(String tableCellAddress, String expected);
		String verifyNotTable(String tableCellAddress, String expected);
		void waitForTable(String tableCellAddress, String expected);
		void waitForNotTable(String tableCellAddress, String expected);
		[Description("Gets all option labels (visible text) for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option labels in the specified select drop-down")]
		String[] getSelectedLabels(String selectLocator);
		void assertSelectedLabels(String selectLocator, String[] expected);
		void assertNotSelectedLabels(String selectLocator, String[] expected);
		String verifySelectedLabels(String selectLocator, String[] expected);
		String verifyNotSelectedLabels(String selectLocator, String[] expected);
		void waitForSelectedLabels(String selectLocator, String[] expected);
		void waitForNotSelectedLabels(String selectLocator, String[] expected);
		[Description("Gets option label (visible text) for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option label in the specified select drop-down")]
		String getSelectedLabel(String selectLocator);
		void assertSelectedLabel(String selectLocator, String expected);
		void assertNotSelectedLabel(String selectLocator, String expected);
		String verifySelectedLabel(String selectLocator, String expected);
		String verifyNotSelectedLabel(String selectLocator, String expected);
		void waitForSelectedLabel(String selectLocator, String expected);
		void waitForNotSelectedLabel(String selectLocator, String expected);
		[Description("Gets all option values (value attributes) for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option values in the specified select drop-down")]
		String[] getSelectedValues(String selectLocator);
		void assertSelectedValues(String selectLocator, String[] expected);
		void assertNotSelectedValues(String selectLocator, String[] expected);
		String verifySelectedValues(String selectLocator, String[] expected);
		String verifyNotSelectedValues(String selectLocator, String[] expected);
		void waitForSelectedValues(String selectLocator, String[] expected);
		void waitForNotSelectedValues(String selectLocator, String[] expected);
		[Description("Gets option value (value attribute) for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option value in the specified select drop-down")]
		String getSelectedValue(String selectLocator);
		void assertSelectedValue(String selectLocator, String expected);
		void assertNotSelectedValue(String selectLocator, String expected);
		String verifySelectedValue(String selectLocator, String expected);
		String verifyNotSelectedValue(String selectLocator, String expected);
		void waitForSelectedValue(String selectLocator, String expected);
		void waitForNotSelectedValue(String selectLocator, String expected);
		[Description("Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option indexes in the specified select drop-down")]
		String[] getSelectedIndexes(String selectLocator);
		void assertSelectedIndexes(String selectLocator, String[] expected);
		void assertNotSelectedIndexes(String selectLocator, String[] expected);
		String verifySelectedIndexes(String selectLocator, String[] expected);
		String verifyNotSelectedIndexes(String selectLocator, String[] expected);
		void waitForSelectedIndexes(String selectLocator, String[] expected);
		void waitForNotSelectedIndexes(String selectLocator, String[] expected);
		[Description("Gets option index (option number, starting at 0) for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option index in the specified select drop-down")]
		String getSelectedIndex(String selectLocator);
		void assertSelectedIndex(String selectLocator, String expected);
		void assertNotSelectedIndex(String selectLocator, String expected);
		String verifySelectedIndex(String selectLocator, String expected);
		String verifyNotSelectedIndex(String selectLocator, String expected);
		void waitForSelectedIndex(String selectLocator, String expected);
		void waitForNotSelectedIndex(String selectLocator, String expected);
		[Description("Gets all option element IDs for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option IDs in the specified select drop-down")]
		String[] getSelectedIds(String selectLocator);
		void assertSelectedIds(String selectLocator, String[] expected);
		void assertNotSelectedIds(String selectLocator, String[] expected);
		String verifySelectedIds(String selectLocator, String[] expected);
		String verifyNotSelectedIds(String selectLocator, String[] expected);
		void waitForSelectedIds(String selectLocator, String[] expected);
		void waitForNotSelectedIds(String selectLocator, String[] expected);
		[Description("Gets option element ID for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option ID in the specified select drop-down")]
		String getSelectedId(String selectLocator);
		void assertSelectedId(String selectLocator, String expected);
		void assertNotSelectedId(String selectLocator, String expected);
		String verifySelectedId(String selectLocator, String expected);
		String verifyNotSelectedId(String selectLocator, String expected);
		void waitForSelectedId(String selectLocator, String expected);
		void waitForNotSelectedId(String selectLocator, String expected);
		[Description("Determines whether some option in a drop-down menu is selected. an element locator identifying a drop-down menutrue if some option has been selected, false otherwise")]
		Boolean isSomethingSelected(String selectLocator);
		void assertSomethingSelected(String selectLocator);
		String verifySomethingSelected(String selectLocator);
		void waitForSomethingSelected(String selectLocator);
		void assertNotSomethingSelected(String selectLocator);
		String verifyNotSomethingSelected(String selectLocator);
		void waitForNotSomethingSelected(String selectLocator);
		[Description("Gets all option labels in the specified select drop-down. an element locator identifying a drop-down menuan array of all option labels in the specified select drop-down")]
		String[] getSelectOptions(String selectLocator);
		void assertSelectOptions(String selectLocator, String[] expected);
		void assertNotSelectOptions(String selectLocator, String[] expected);
		String verifySelectOptions(String selectLocator, String[] expected);
		String verifyNotSelectOptions(String selectLocator, String[] expected);
		void waitForSelectOptions(String selectLocator, String[] expected);
		void waitForNotSelectOptions(String selectLocator, String[] expected);
		[Description("Gets the value of an element attribute. The value of the attribute may differ across browsers (this is the case for the \"style\" attribute, for example). an element locator followed by an @ sign and then the name of the attribute, e.g. \"foo@bar\"the value of the specified attribute")]
		String getAttribute(String attributeLocator);
		void assertAttribute(String attributeLocator, String expected);
		void assertNotAttribute(String attributeLocator, String expected);
		String verifyAttribute(String attributeLocator, String expected);
		String verifyNotAttribute(String attributeLocator, String expected);
		void waitForAttribute(String attributeLocator, String expected);
		void waitForNotAttribute(String attributeLocator, String expected);
		[Description("Verifies that the specified text pattern appears somewhere on the rendered page shown to the user. a pattern to match with the text of the pagetrue if the pattern matches the text, false otherwise")]
		Boolean isTextPresent(String pattern);
		void assertTextPresent(String pattern);
		String verifyTextPresent(String pattern);
		void waitForTextPresent(String pattern);
		void assertTextNotPresent(String pattern);
		String verifyTextNotPresent(String pattern);
		void waitForTextNotPresent(String pattern);
		[Description("Verifies that the specified element is somewhere on the page. an element locatortrue if the element is present, false otherwise")]
		//Boolean isElementPresent(String locator);
		void assertElementPresent(String locator);
		String verifyElementPresent(String locator);
		void waitForElementPresent(String locator);
		void assertElementNotPresent(String locator);
		String verifyElementNotPresent(String locator);
		void waitForElementNotPresent(String locator);
		[Description("Determines if the specified element is visible. An element can be rendered invisible by setting the CSS \"visibility\" property to \"hidden\", or the \"display\" property to \"none\", either for the element itself or one if its ancestors. This method will fail if the element is not present. an element locatortrue if the specified element is visible, false otherwise")]
		Boolean isVisible(String locator);
		void assertVisible(String locator);
		String verifyVisible(String locator);
		void waitForVisible(String locator);
		void assertNotVisible(String locator);
		String verifyNotVisible(String locator);
		void waitForNotVisible(String locator);
		[Description("Determines whether the specified input element is editable, ie hasn't been disabled. This method will fail if the specified element isn't an input element. an element locatortrue if the input element is editable, false otherwise")]
		Boolean isEditable(String locator);
		void assertEditable(String locator);
		String verifyEditable(String locator);
		void waitForEditable(String locator);
		void assertNotEditable(String locator);
		String verifyNotEditable(String locator);
		void waitForNotEditable(String locator);
		[Description("Returns the IDs of all buttons on the page. If a given button has no ID, it will appear as \"\" in this array.the IDs of all buttons on the page")]
		String[] getAllButtons();
		void assertAllButtons(String[] expected);
		void assertNotAllButtons(String[] expected);
		String verifyAllButtons(String[] expected);
		String verifyNotAllButtons(String[] expected);
		void waitForAllButtons(String[] expected);
		void waitForNotAllButtons(String[] expected);
		[Description("Returns the IDs of all links on the page. If a given link has no ID, it will appear as \"\" in this array.the IDs of all links on the page")]
		String[] getAllLinks();
		void assertAllLinks(String[] expected);
		void assertNotAllLinks(String[] expected);
		String verifyAllLinks(String[] expected);
		String verifyNotAllLinks(String[] expected);
		void waitForAllLinks(String[] expected);
		void waitForNotAllLinks(String[] expected);
		[Description("Returns the IDs of all input fields on the page. If a given field has no ID, it will appear as \"\" in this array.the IDs of all field on the page")]
		String[] getAllFields();
		void assertAllFields(String[] expected);
		void assertNotAllFields(String[] expected);
		String verifyAllFields(String[] expected);
		String verifyNotAllFields(String[] expected);
		void waitForAllFields(String[] expected);
		void waitForNotAllFields(String[] expected);
		[Description("Returns an array of JavaScript property values from all known windows having one. name of an attribute on the windowsthe set of values of this attribute from all known windows.")]
		String[] getAttributeFromAllWindows(String attributeName);
		void assertAttributeFromAllWindows(String attributeName, String[] expected);
		void assertNotAttributeFromAllWindows(String attributeName, String[] expected);
		String verifyAttributeFromAllWindows(String attributeName, String[] expected);
		String verifyNotAttributeFromAllWindows(String attributeName, String[] expected);
		void waitForAttributeFromAllWindows(String attributeName, String[] expected);
		void waitForNotAttributeFromAllWindows(String attributeName, String[] expected);
		[Description("deprecated - use dragAndDrop instead an element locatoroffset in pixels from the current location to which the element should be moved, e.g., \"+70,-300\"")]
		void dragdrop(String locator, String movementsString);
		void dragdropAndWait(String locator, String movementsString);
		[Description("Configure the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10). Setting this value to 0 means that we'll send a \"mousemove\" event to every single pixel in between the start location and the end location; that can be very slow, and may cause some browsers to force the JavaScript to timeout.If the mouse speed is greater than the distance between the two dragged objects, we'll just send one \"mousemove\" at the start location and then one final one at the end location.the number of pixels between \"mousemove\" events")]
		void setMouseSpeed(String pixels);
		[Description("Returns the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10). the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10)")]
		Double getMouseSpeed();
		void assertMouseSpeed(Double expected);
		void assertNotMouseSpeed(Double expected);
		String verifyMouseSpeed(Double expected);
		String verifyNotMouseSpeed(Double expected);
		void waitForMouseSpeed(Double expected);
		void waitForNotMouseSpeed(Double expected);
		[Description("Drags an element a certain distance and then drops it an element locatoroffset in pixels from the current location to which the element should be moved, e.g., \"+70,-300\"")]
		void dragAndDrop(String locator, String movementsString);
		void dragAndDropAndWait(String locator, String movementsString);
		[Description("Drags an element and drops it on another element an element to be draggedan element whose location (i.e., whose center-most pixel) will be the point where locatorOfObjectToBeDragged is dropped")]
		void dragAndDropToObject(String locatorOfObjectToBeDragged, String locatorOfDragDestinationObject);
		void dragAndDropToObjectAndWait(String locatorOfObjectToBeDragged, String locatorOfDragDestinationObject);
		[Description("Gives focus to the currently selected window ")]
		void windowFocus();
		[Description("Returns the IDs of all windows that the browser knows about in an array. Array of identifiers of all windows that the browser knows about.")]
		String[] getAllWindowIds();
		void assertAllWindowIds(String[] expected);
		void assertNotAllWindowIds(String[] expected);
		String verifyAllWindowIds(String[] expected);
		String verifyNotAllWindowIds(String[] expected);
		void waitForAllWindowIds(String[] expected);
		void waitForNotAllWindowIds(String[] expected);
		[Description("Returns the names of all windows that the browser knows about in an array. Array of names of all windows that the browser knows about.")]
		String[] getAllWindowNames();
		void assertAllWindowNames(String[] expected);
		void assertNotAllWindowNames(String[] expected);
		String verifyAllWindowNames(String[] expected);
		String verifyNotAllWindowNames(String[] expected);
		void waitForAllWindowNames(String[] expected);
		void waitForNotAllWindowNames(String[] expected);
		[Description("Returns the titles of all windows that the browser knows about in an array. Array of titles of all windows that the browser knows about.")]
		String[] getAllWindowTitles();
		void assertAllWindowTitles(String[] expected);
		void assertNotAllWindowTitles(String[] expected);
		String verifyAllWindowTitles(String[] expected);
		String verifyNotAllWindowTitles(String[] expected);
		void waitForAllWindowTitles(String[] expected);
		void waitForNotAllWindowTitles(String[] expected);
		[Description("Returns the entire HTML source between the opening and closing \"html\" tags. the entire HTML source")]
		String getHtmlSource();
		void assertHtmlSource(String expected);
		void assertNotHtmlSource(String expected);
		String verifyHtmlSource(String expected);
		String verifyNotHtmlSource(String expected);
		void waitForHtmlSource(String expected);
		void waitForNotHtmlSource(String expected);
		[Description("Moves the text cursor to the specified position in the given input element or textarea. This method will fail if the specified element isn't an input element or textarea. an element locator pointing to an input element or textareathe numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field. You can also set the cursor to -1 to move it to the end of the field.")]
		void setCursorPosition(String locator, String position);
		[Description("Get the relative index of an element to its parent (starting from 0). The comment node and empty text node will be ignored. an element locator pointing to an elementof relative index of the element to its parent (starting from 0)")]
		Double getElementIndex(String locator);
		void assertElementIndex(String locator, Double expected);
		void assertNotElementIndex(String locator, Double expected);
		String verifyElementIndex(String locator, Double expected);
		String verifyNotElementIndex(String locator, Double expected);
		void waitForElementIndex(String locator, Double expected);
		void waitForNotElementIndex(String locator, Double expected);
		[Description("Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will not be considered ordered. an element locator pointing to the first elementan element locator pointing to the second elementtrue if element1 is the previous sibling of element2, false otherwise")]
		Boolean isOrdered(String locator1, String locator2);
		void assertOrdered(String locator1, String locator2);
		String verifyOrdered(String locator1, String locator2);
		void waitForOrdered(String locator1, String locator2);
		void assertNotOrdered(String locator1, String locator2);
		String verifyNotOrdered(String locator1, String locator2);
		void waitForNotOrdered(String locator1, String locator2);
		[Description("Retrieves the horizontal position of an element an element locator pointing to an element OR an element itselfof pixels from the edge of the frame.")]
		Double getElementPositionLeft(String locator);
		void assertElementPositionLeft(String locator, Double expected);
		void assertNotElementPositionLeft(String locator, Double expected);
		String verifyElementPositionLeft(String locator, Double expected);
		String verifyNotElementPositionLeft(String locator, Double expected);
		void waitForElementPositionLeft(String locator, Double expected);
		void waitForNotElementPositionLeft(String locator, Double expected);
		[Description("Retrieves the vertical position of an element an element locator pointing to an element OR an element itselfof pixels from the edge of the frame.")]
		Double getElementPositionTop(String locator);
		void assertElementPositionTop(String locator, Double expected);
		void assertNotElementPositionTop(String locator, Double expected);
		String verifyElementPositionTop(String locator, Double expected);
		String verifyNotElementPositionTop(String locator, Double expected);
		void waitForElementPositionTop(String locator, Double expected);
		void waitForNotElementPositionTop(String locator, Double expected);
		[Description("Retrieves the width of an element an element locator pointing to an elementwidth of an element in pixels")]
		Double getElementWidth(String locator);
		void assertElementWidth(String locator, Double expected);
		void assertNotElementWidth(String locator, Double expected);
		String verifyElementWidth(String locator, Double expected);
		String verifyNotElementWidth(String locator, Double expected);
		void waitForElementWidth(String locator, Double expected);
		void waitForNotElementWidth(String locator, Double expected);
		[Description("Retrieves the height of an element an element locator pointing to an elementheight of an element in pixels")]
		Double getElementHeight(String locator);
		void assertElementHeight(String locator, Double expected);
		void assertNotElementHeight(String locator, Double expected);
		String verifyElementHeight(String locator, Double expected);
		String verifyNotElementHeight(String locator, Double expected);
		void waitForElementHeight(String locator, Double expected);
		void waitForNotElementHeight(String locator, Double expected);
		[Description("Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers. Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to return the position of the last location of the cursor, even though the cursor is now gone from the page. This is filed as SEL-243. This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element. an element locator pointing to an input element or textareathe numerical position of the cursor in the field")]
		Double getCursorPosition(String locator);
		void assertCursorPosition(String locator, Double expected);
		void assertNotCursorPosition(String locator, Double expected);
		String verifyCursorPosition(String locator, Double expected);
		String verifyNotCursorPosition(String locator, Double expected);
		void waitForCursorPosition(String locator, Double expected);
		void waitForNotCursorPosition(String locator, Double expected);
		[Description("Returns the specified expression. This is useful because of JavaScript preprocessing. It is used to generate commands like assertExpression and waitForExpression.the value to returnthe value passed in")]
		String getExpression(String expression);
		void assertExpression(String expression, String expected);
		void assertNotExpression(String expression, String expected);
		String verifyExpression(String expression, String expected);
		String verifyNotExpression(String expression, String expected);
		void waitForExpression(String expression, String expected);
		void waitForNotExpression(String expression, String expected);
		[Description("Returns the number of nodes that match the specified xpath, eg. \"//table\" would give the number of tables. the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.the number of nodes that match the specified xpath")]
		Double getXpathCount(String xpath);
		void assertXpathCount(String xpath, Double expected);
		void assertNotXpathCount(String xpath, Double expected);
		String verifyXpathCount(String xpath, Double expected);
		String verifyNotXpathCount(String xpath, Double expected);
		void waitForXpathCount(String xpath, Double expected);
		void waitForNotXpathCount(String xpath, Double expected);
		[Description("Returns the number of nodes that match the specified css, eg. \"css=table\" would give the number of tables. the css path expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.the number of nodes that match the specified css locator")]
		Double getCssCount(String cssLocator);
		void assertCssCount(String cssLocator, Double expected);
		void assertNotCssCount(String cssLocator, Double expected);
		String verifyCssCount(String cssLocator, Double expected);
		String verifyNotCssCount(String cssLocator, Double expected);
		void waitForCssCount(String cssLocator, Double expected);
		void waitForNotCssCount(String cssLocator, Double expected);
		[Description("Temporarily sets the \"id\" attribute of the specified element, so you can locate it in the future using its ID rather than a slow/complicated XPath. This ID will disappear once the page is reloaded. an element locator pointing to an elementa string to be used as the ID of the specified element")]
		void assignId(String locator, String identifier);
		void assignIdAndWait(String locator, String identifier);
		[Description("Specifies whether Selenium should use the native in-browser implementation of XPath (if any native version is available); if you pass \"false\" to this function, we will always use our pure-JavaScript xpath library. Using the pure-JS xpath library can improve the consistency of xpath element locators between different browser vendors, but the pure-JS version is much slower than the native implementations. boolean, true means we'll prefer to use native XPath; false means we'll only use JS XPath")]
		void allowNativeXpath(String allow);
		void allowNativeXpathAndWait(String allow);
		[Description("Specifies whether Selenium will ignore xpath attributes that have no value, i.e. are the empty string, when using the non-native xpath evaluation engine. You'd want to do this for performance reasons in IE. However, this could break certain xpaths, for example an xpath that looks for an attribute whose value is NOT the empty string. The hope is that such xpaths are relatively rare, but the user should have the option of using them. Note that this only influences xpath evaluation when using the ajaxslt engine (i.e. not \"javascript-xpath\"). boolean, true means we'll ignore attributes without value at the expense of xpath \"correctness\"; false means we'll sacrifice speed for correctness.")]
		void ignoreAttributesWithoutValue(String ignore);
		void ignoreAttributesWithoutValueAndWait(String ignore);
		[Description("Runs the specified JavaScript snippet repeatedly until it evaluates to \"true\". The snippet may have multiple lines, but only the result of the last line will be considered. Note that, by default, the snippet will be run in the runner's test window, not in the window of your application. To get the window of your application, you can use the JavaScript snippet selenium.browserbot.getCurrentWindow(), and then run your JavaScript in therethe JavaScript snippet to runa timeout in milliseconds, after which this command will return with an error")]
		void waitForCondition(String script, Object timeoutms);
        #endregion
    }
}
