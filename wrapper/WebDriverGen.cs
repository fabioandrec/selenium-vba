using System;

namespace SeleniumWrapper
{
    partial class WebDriver
    {
        // Following funtion are automatically generated by reflexion
        #region Auto-Generated Code
		/// <summary>Waits for a new frame to load. Selenium constantly keeps track of new pages and frames loading, and sets a \"newPageLoaded\" flag when it first notices a page load. See waitForPageToLoad for more information. FrameAddress from the server sidea timeout in milliseconds, after which this command will return with an error</summary>
		public void waitForFrameToLoad(String frameAddress, Object timeoutms){InvokeVoid(()=>WebDriverBacked.WaitForFrameToLoad(frameAddress, timeoutms.ToString()));}
		/// <summary>Return all cookies of the current page under test. all cookies of the current page under test</summary>
		public String getCookie(){return InvokeReturn(WebDriverBacked.GetCookie);}
		public void assertCookie(String expected){InvokeAssert(WebDriverBacked.GetCookie,expected,true);}
		public void assertNotCookie(String expected){InvokeAssert(WebDriverBacked.GetCookie,expected,false);}
		public String verifyCookie(String expected){return InvokeVerify(WebDriverBacked.GetCookie,expected,true);}
		public String verifyNotCookie(String expected){return InvokeVerify(WebDriverBacked.GetCookie,expected,false);}
		public void waitForCookie(String expected){InvokeWaitFor(WebDriverBacked.GetCookie,expected,true);}
		public void waitForNotCookie(String expected){InvokeWaitFor(WebDriverBacked.GetCookie,expected,false);}
		/// <summary>Returns the value of the cookie with the specified name, or throws an error if the cookie is not present. the name of the cookiethe value of the cookie</summary>
		public String getCookieByName(String name){return InvokeReturn(()=>WebDriverBacked.GetCookieByName(name));}
		public void assertCookieByName(String name, String expected){InvokeAssert(()=>WebDriverBacked.GetCookieByName(name),expected,true);}
		public void assertNotCookieByName(String name, String expected){InvokeAssert(()=>WebDriverBacked.GetCookieByName(name),expected,false);}
		public String verifyCookieByName(String name, String expected){return InvokeVerify(()=>WebDriverBacked.GetCookieByName(name),expected,true);}
		public String verifyNotCookieByName(String name, String expected){return InvokeVerify(()=>WebDriverBacked.GetCookieByName(name),expected,false);}
		public void waitForCookieByName(String name, String expected){InvokeWaitFor(()=>WebDriverBacked.GetCookieByName(name),expected,true);}
		public void waitForNotCookieByName(String name, String expected){InvokeWaitFor(()=>WebDriverBacked.GetCookieByName(name),expected,false);}
		/// <summary>Returns true if a cookie with the specified name is present, or false otherwise. the name of the cookietrue if a cookie with the specified name is present, or false otherwise.</summary>
		public Boolean isCookiePresent(String name){return InvokeReturn(()=>WebDriverBacked.IsCookiePresent(name));}
		public void assertCookiePresent(String name){InvokeAssert(()=>WebDriverBacked.IsCookiePresent(name),true,true);}
		public String verifyCookiePresent(String name){return InvokeVerify(()=>WebDriverBacked.IsCookiePresent(name),true,true);}
		public void waitForCookiePresent(String name){InvokeWaitFor(()=>WebDriverBacked.IsCookiePresent(name),true,true);}
		public void assertCookieNotPresent(String name){InvokeAssert(()=>WebDriverBacked.IsCookiePresent(name),false,true);}
		public String verifyCookieNotPresent(String name){return InvokeVerify(()=>WebDriverBacked.IsCookiePresent(name),false,true);}
		public void waitForCookieNotPresent(String name){InvokeWaitFor(()=>WebDriverBacked.IsCookiePresent(name),false,true);}
		/// <summary>Create a new cookie whose path and domain are same with those of current page under test, unless you specified a path for this cookie explicitly. name and value of the cookie in a format \"name=value\"options for the cookie. Currently supported options include 'path', 'max_age' and 'domain'. the optionsString's format is \"path=/path/, max_age=60, domain=.foo.com\". The order of options are irrelevant, the unit of the value of 'max_age' is second. Note that specifying a domain that isn't a subset of the current domain will usually fail.</summary>
		public void createCookie(String nameValuePair, String optionsString){InvokeVoid(()=>WebDriverBacked.CreateCookie(nameValuePair, optionsString));}
		/// <summary>Delete a named cookie with specified path and domain. Be careful; to delete a cookie, you need to delete it using the exact same path and domain that were used to create the cookie. If the path is wrong, or the domain is wrong, the cookie simply won't be deleted. Also note that specifying a domain that isn't a subset of the current domain will usually fail. Since there's no way to discover at runtime the original path and domain of a given cookie, we've added an option called 'recurse' to try all sub-domains of the current domain with all paths that are a subset of the current path. Beware; this option can be slow. In big-O notation, it operates in O(n*m) time, where n is the number of dots in the domain name and m is the number of slashes in the path. the name of the cookie to be deletedoptions for the cookie. Currently supported options include 'path', 'domain' and 'recurse.' The optionsString's format is \"path=/path/, domain=.foo.com, recurse=true\". The order of options are irrelevant. Note that specifying a domain that isn't a subset of the current domain will usually fail.</summary>
		public void deleteCookie(String name, String optionsString){InvokeVoid(()=>WebDriverBacked.DeleteCookie(name, optionsString));}
		/// <summary>Calls deleteCookie with recurse=true on all cookies visible to the current page. As noted on the documentation for deleteCookie, recurse=true can be much slower than simply deleting the cookies using a known domain/path. </summary>
		public void deleteAllVisibleCookies(){InvokeVoid(WebDriverBacked.DeleteAllVisibleCookies);}
		/// <summary>Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded. Valid logLevel strings are: \"debug\", \"info\", \"warn\", \"error\" or \"off\". To see the browser logs, you need to either show the log window in GUI mode, or enable browser-side logging in Selenium RC. one of the following: \"debug\", \"info\", \"warn\", \"error\" or \"off\"</summary>
		public void setBrowserLogLevel(String logLevel){InvokeVoid(()=>WebDriverBacked.SetBrowserLogLevel(logLevel));}
		/// <summary>Creates a new \"script\" tag in the body of the current test window, and adds the specified text into the body of the command. Scripts run in this way can often be debugged more easily than scripts executed using Selenium's \"getEval\" command. Beware that JS exceptions thrown in these script tags aren't managed by Selenium, so you should probably wrap your script in try/catch blocks if there is any chance that the script will throw an exception. the JavaScript snippet to run</summary>
		public void runScript(String script){InvokeVoid(()=>WebDriverBacked.RunScript(script));}
		public void runScriptAndWait(String script){InvokeAndWait(()=>WebDriverBacked.RunScript(script));}
		/// <summary>Defines a new function for Selenium to locate elements on the page. For example, if you define the strategy \"foo\", and someone runs click(\"foo=blah\"), we'll run your function, passing you the string \"blah\", and click on the element that your function returns, or throw an \"Element not found\" error if your function returns null. We'll pass three arguments to your function: locator: the string the user passed ininWindow: the currently selected windowinDocument: the currently selected document The function must return null if the element can't be found. the name of the strategy to define; this should use only letters [a-zA-Z] with no spaces or other punctuation.a string defining the body of a function in JavaScript. For example: return inDocument.getElementById(locator);</summary>
		public void addLocationStrategy(String strategyName, String functionDefinition){InvokeVoid(()=>WebDriverBacked.AddLocationStrategy(strategyName, functionDefinition));}
		public void addLocationStrategyAndWait(String strategyName, String functionDefinition){InvokeAndWait(()=>WebDriverBacked.AddLocationStrategy(strategyName, functionDefinition));}
		/// <summary>Executes a command rollup, which is a series of commands with a unique name, and optionally arguments that control the generation of the set of commands. If any one of the rolled-up commands fails, the rollup is considered to have failed. Rollups may also contain nested rollups. the name of the rollup commandkeyword arguments string that influences how the rollup expands into commands</summary>
		public void rollup(String rollupName, String kwargs){InvokeVoid(()=>WebDriverBacked.Rollup(rollupName, kwargs));}
		public void rollupAndWait(String rollupName, String kwargs){InvokeAndWait(()=>WebDriverBacked.Rollup(rollupName, kwargs));}
		/// <summary>Loads script content into a new script tag in the Selenium document. This differs from the runScript command in that runScript adds the script tag to the document of the AUT, not the Selenium document. The following entities in the script content are replaced by the characters they represent: " " and The corresponding remove command is removeScript. the Javascript content of the script to add(optional) the id of the new script tag. If specified, and an element with this id already exists, this operation will fail.</summary>
		public void addScript(String scriptContent, String scriptTagId){InvokeVoid(()=>WebDriverBacked.AddScript(scriptContent, scriptTagId));}
		public void addScriptAndWait(String scriptContent, String scriptTagId){InvokeAndWait(()=>WebDriverBacked.AddScript(scriptContent, scriptTagId));}
		/// <summary>Removes a script tag from the Selenium document identified by the given id. Does nothing if the referenced tag doesn't exist. the id of the script element to remove.</summary>
		public void removeScript(String scriptTagId){InvokeVoid(()=>WebDriverBacked.RemoveScript(scriptTagId));}
		public void removeScriptAndWait(String scriptTagId){InvokeAndWait(()=>WebDriverBacked.RemoveScript(scriptTagId));}
		/// <summary>Allows choice of one of the available libraries. name of the desired library Only the following three can be chosen: \"ajaxslt\" - Google's library\"javascript-xpath\" - Cybozu Labs' faster library\"default\" - The default library. Currently the default library is \"ajaxslt\" . If libraryName isn't one of these three, then no change will be made.</summary>
		public void useXpathLibrary(String libraryName){InvokeVoid(()=>WebDriverBacked.UseXpathLibrary(libraryName));}
		public void useXpathLibraryAndWait(String libraryName){InvokeAndWait(()=>WebDriverBacked.UseXpathLibrary(libraryName));}
		/// <summary>Writes a message to the status bar and adds a note to the browser-side log. the message to be sent to the browser</summary>
		public void setContext(String context){InvokeVoid(()=>WebDriverBacked.SetContext(context));}
		/// <summary>Sets a file input (upload) field to the file listed in fileLocator an element locatora URL pointing to the specified file. Before the file can be set in the input field (fieldLocator), Selenium RC may need to transfer the file to the local machine before attaching the file in a web page form. This is common in selenium grid configurations where the RC server driving the browser is not the same machine that started the test. Supported Browsers: Firefox (\"*chrome\") only.</summary>
		public void attachFile(String fieldLocator, String fileLocator){InvokeVoid(()=>WebDriverBacked.AttachFile(fieldLocator, fileLocator));}
		public void attachFileAndWait(String fieldLocator, String fileLocator){InvokeAndWait(()=>WebDriverBacked.AttachFile(fieldLocator, fileLocator));}
		/// <summary>Capture a PNG screenshot. It then returns the file as a base 64 encoded string. The base 64 encoded string of the screen shot (PNG file)</summary>
		public String captureScreenshotToString(){return InvokeReturn(WebDriverBacked.CaptureScreenshotToString);}
		/// <summary> Captures the Network Traffic that is passing through Selenium Server Type of traffic to captureThe traffic passing through the Selenium Server.</summary>
		public String captureNetworkTraffic(String type){return InvokeReturn(()=>WebDriverBacked.CaptureNetworkTraffic(type));}
		/// <summary>Retrieve the last messages logged on a specific remote control. Useful for error reports, especially when running multiple remote controls in a distributed environment. The maximum number of log messages that can be retrieve is configured on remote control startup. The last N log messages as a multi-line string.</summary>
		public String retrieveLastRemoteControlLogs(){return InvokeReturn(WebDriverBacked.RetrieveLastRemoteControlLogs);}
		/// <summary>Simulates a user pressing a key (without releasing it yet) by sending a native operating system keystroke. This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing a key on the keyboard. It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and metaKeyDown commands, and does not target any particular HTML element. To send a keystroke to a particular element, focus on the element first before running this command. an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</summary>
		public void keyDownNative(String keycode){InvokeVoid(()=>WebDriverBacked.KeyDownNative(keycode));}
		public void keyDownNativeAndWait(String keycode){InvokeAndWait(()=>WebDriverBacked.KeyDownNative(keycode));}
		/// <summary>Simulates a user releasing a key by sending a native operating system keystroke. This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing a key on the keyboard. It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and metaKeyDown commands, and does not target any particular HTML element. To send a keystroke to a particular element, focus on the element first before running this command. an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</summary>
		public void keyUpNative(String keycode){InvokeVoid(()=>WebDriverBacked.KeyUpNative(keycode));}
		public void keyUpNativeAndWait(String keycode){InvokeAndWait(()=>WebDriverBacked.KeyUpNative(keycode));}
		/// <summary>Simulates a user pressing and releasing a key by sending a native operating system keystroke. This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing a key on the keyboard. It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and metaKeyDown commands, and does not target any particular HTML element. To send a keystroke to a particular element, focus on the element first before running this command. an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</summary>
		public void keyPressNative(String keycode){InvokeVoid(()=>WebDriverBacked.KeyPressNative(keycode));}
		public void keyPressNativeAndWait(String keycode){InvokeAndWait(()=>WebDriverBacked.KeyPressNative(keycode));}
		/// <summary> Sets the extension Javascript for the session The extention JavaScript to use.</summary>
		public void setExtensionJs(String extensionJs){InvokeVoid(()=>WebDriverBacked.SetExtensionJs(extensionJs));}
		/// <summary>Clicks on a link, button, checkbox or radio button. If the click action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locator</summary>
		public void click(String locator){InvokeVoid(()=>WebDriverBacked.Click(locator));}
		public void clickAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.Click(locator));}
		/// <summary>Double clicks on a link, button, checkbox or radio button. If the double click action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locator</summary>
		public void doubleClick(String locator){InvokeVoid(()=>WebDriverBacked.DoubleClick(locator));}
		public void doubleClickAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.DoubleClick(locator));}
		/// <summary>Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element). an element locator</summary>
		public void contextMenu(String locator){InvokeVoid(()=>WebDriverBacked.ContextMenu(locator));}
		public void contextMenuAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.ContextMenu(locator));}
		/// <summary>Clicks on a link, button, checkbox or radio button. If the click action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void clickAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.ClickAt(locator, coordString));}
		public void clickAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.ClickAt(locator, coordString));}
		/// <summary>Doubleclicks on a link, button, checkbox or radio button. If the action causes a new page to load (like a link usually does), call waitForPageToLoad. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void doubleClickAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.DoubleClickAt(locator, coordString));}
		public void doubleClickAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.DoubleClickAt(locator, coordString));}
		/// <summary>Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element). an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void contextMenuAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.ContextMenuAt(locator, coordString));}
		public void contextMenuAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.ContextMenuAt(locator, coordString));}
		/// <summary>Explicitly simulate an event, to trigger the corresponding \"onevent\" handler. an element locatorthe event name, e.g. \"focus\" or \"blur\"</summary>
		public void fireEvent(String locator, String eventName){InvokeVoid(()=>WebDriverBacked.FireEvent(locator, eventName));}
		public void fireEventAndWait(String locator, String eventName){InvokeAndWait(()=>WebDriverBacked.FireEvent(locator, eventName));}
		/// <summary>Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field. an element locator</summary>
		public void focus(String locator){InvokeVoid(()=>WebDriverBacked.Focus(locator));}
		public void focusAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.Focus(locator));}
		/// <summary>Simulates a user pressing and releasing a key. an element locatorEither be a string(\"\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: \"w\", \"\\119\".</summary>
		public void keyPress(String locator, String keySequence){InvokeVoid(()=>WebDriverBacked.KeyPress(locator, keySequence));}
		public void keyPressAndWait(String locator, String keySequence){InvokeAndWait(()=>WebDriverBacked.KeyPress(locator, keySequence));}
		/// <summary>Press the shift key and hold it down until doShiftUp() is called or a new page is loaded. </summary>
		public void shiftKeyDown(){InvokeVoid(WebDriverBacked.ShiftKeyDown);}
		public void shiftKeyDownAndWait(){InvokeAndWait(WebDriverBacked.ShiftKeyDown);}
		/// <summary>Release the shift key. </summary>
		public void shiftKeyUp(){InvokeVoid(WebDriverBacked.ShiftKeyUp);}
		public void shiftKeyUpAndWait(){InvokeAndWait(WebDriverBacked.ShiftKeyUp);}
		/// <summary>Press the meta key and hold it down until doMetaUp() is called or a new page is loaded. </summary>
		public void metaKeyDown(){InvokeVoid(WebDriverBacked.MetaKeyDown);}
		public void metaKeyDownAndWait(){InvokeAndWait(WebDriverBacked.MetaKeyDown);}
		/// <summary>Release the meta key. </summary>
		public void metaKeyUp(){InvokeVoid(WebDriverBacked.MetaKeyUp);}
		public void metaKeyUpAndWait(){InvokeAndWait(WebDriverBacked.MetaKeyUp);}
		/// <summary>Press the alt key and hold it down until doAltUp() is called or a new page is loaded. </summary>
		public void altKeyDown(){InvokeVoid(WebDriverBacked.AltKeyDown);}
		public void altKeyDownAndWait(){InvokeAndWait(WebDriverBacked.AltKeyDown);}
		/// <summary>Release the alt key. </summary>
		public void altKeyUp(){InvokeVoid(WebDriverBacked.AltKeyUp);}
		public void altKeyUpAndWait(){InvokeAndWait(WebDriverBacked.AltKeyUp);}
		/// <summary>Press the control key and hold it down until doControlUp() is called or a new page is loaded. </summary>
		public void controlKeyDown(){InvokeVoid(WebDriverBacked.ControlKeyDown);}
		public void controlKeyDownAndWait(){InvokeAndWait(WebDriverBacked.ControlKeyDown);}
		/// <summary>Release the control key. </summary>
		public void controlKeyUp(){InvokeVoid(WebDriverBacked.ControlKeyUp);}
		public void controlKeyUpAndWait(){InvokeAndWait(WebDriverBacked.ControlKeyUp);}
		/// <summary>Simulates a user pressing a key (without releasing it yet). an element locatorEither be a string(\"\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: \"w\", \"\\119\".</summary>
		public void keyDown(String locator, String keySequence){InvokeVoid(()=>WebDriverBacked.KeyDown(locator, keySequence));}
		public void keyDownAndWait(String locator, String keySequence){InvokeAndWait(()=>WebDriverBacked.KeyDown(locator, keySequence));}
		/// <summary>Simulates a user releasing a key. an element locatorEither be a string(\"\" followed by the numeric keycode of the key to be pressed, normally the ASCII value of that key), or a single character. For example: \"w\", \"\\119\".</summary>
		public void keyUp(String locator, String keySequence){InvokeVoid(()=>WebDriverBacked.KeyUp(locator, keySequence));}
		public void keyUpAndWait(String locator, String keySequence){InvokeAndWait(()=>WebDriverBacked.KeyUp(locator, keySequence));}
		/// <summary>Simulates a user hovering a mouse over the specified element. an element locator</summary>
		public void mouseOver(String locator){InvokeVoid(()=>WebDriverBacked.MouseOver(locator));}
		public void mouseOverAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.MouseOver(locator));}
		/// <summary>Simulates a user moving the mouse pointer away from the specified element. an element locator</summary>
		public void mouseOut(String locator){InvokeVoid(()=>WebDriverBacked.MouseOut(locator));}
		public void mouseOutAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.MouseOut(locator));}
		/// <summary>Simulates a user pressing the left mouse button (without releasing it yet) on the specified element. an element locator</summary>
		public void mouseDown(String locator){InvokeVoid(()=>WebDriverBacked.MouseDown(locator));}
		public void mouseDownAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.MouseDown(locator));}
		/// <summary>Simulates a user pressing the right mouse button (without releasing it yet) on the specified element. an element locator</summary>
		public void mouseDownRight(String locator){InvokeVoid(()=>WebDriverBacked.MouseDownRight(locator));}
		public void mouseDownRightAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.MouseDownRight(locator));}
		/// <summary>Simulates a user pressing the left mouse button (without releasing it yet) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void mouseDownAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.MouseDownAt(locator, coordString));}
		public void mouseDownAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.MouseDownAt(locator, coordString));}
		/// <summary>Simulates a user pressing the right mouse button (without releasing it yet) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void mouseDownRightAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.MouseDownRightAt(locator, coordString));}
		public void mouseDownRightAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.MouseDownRightAt(locator, coordString));}
		/// <summary>Simulates the event that occurs when the user releases the mouse button (i.e., stops holding the button down) on the specified element. an element locator</summary>
		public void mouseUp(String locator){InvokeVoid(()=>WebDriverBacked.MouseUp(locator));}
		public void mouseUpAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.MouseUp(locator));}
		/// <summary>Simulates the event that occurs when the user releases the right mouse button (i.e., stops holding the button down) on the specified element. an element locator</summary>
		public void mouseUpRight(String locator){InvokeVoid(()=>WebDriverBacked.MouseUpRight(locator));}
		public void mouseUpRightAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.MouseUpRight(locator));}
		/// <summary>Simulates the event that occurs when the user releases the mouse button (i.e., stops holding the button down) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void mouseUpAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.MouseUpAt(locator, coordString));}
		public void mouseUpAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.MouseUpAt(locator, coordString));}
		/// <summary>Simulates the event that occurs when the user releases the right mouse button (i.e., stops holding the button down) at the specified location. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void mouseUpRightAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.MouseUpRightAt(locator, coordString));}
		public void mouseUpRightAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.MouseUpRightAt(locator, coordString));}
		/// <summary>Simulates a user pressing the mouse button (without releasing it yet) on the specified element. an element locator</summary>
		public void mouseMove(String locator){InvokeVoid(()=>WebDriverBacked.MouseMove(locator));}
		public void mouseMoveAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.MouseMove(locator));}
		/// <summary>Simulates a user pressing the mouse button (without releasing it yet) on the specified element. an element locatorspecifies the x,y position (i.e. - 10,20) of the mouse event relative to the element returned by the locator.</summary>
		public void mouseMoveAt(String locator, String coordString){InvokeVoid(()=>WebDriverBacked.MouseMoveAt(locator, coordString));}
		public void mouseMoveAtAndWait(String locator, String coordString){InvokeAndWait(()=>WebDriverBacked.MouseMoveAt(locator, coordString));}
		/// <summary>Sets the value of an input field, as though you typed it in. Can also be used to set the value of combo boxes, check boxes, etc. In these cases, value should be the value of the option selected, not the visible text.an element locatorthe value to type</summary>
		public void type(String locator, String value){InvokeVoid(()=>WebDriverBacked.Type(locator, value));}
		public void typeAndWait(String locator, String value){InvokeAndWait(()=>WebDriverBacked.Type(locator, value));}
		/// <summary>Simulates keystroke events on the specified element, as though you typed the value key-by-key. This is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string; this is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.Unlike the simple \"type\" command, which forces the specified value into the page directly, this command may or may not have any visible effect, even in cases where typing keys would normally have a visible effect. For example, if you use \"typeKeys\" on a form element, you may or may not see the results of what you typed in the field.In some cases, you may need to use the simple \"type\" command to set the value of the field and then the \"typeKeys\" command to send the keystroke events corresponding to what you just typed.an element locatorthe value to type</summary>
		public void typeKeys(String locator, String value){InvokeVoid(()=>WebDriverBacked.TypeKeys(locator, value));}
		public void typeKeysAndWait(String locator, String value){InvokeAndWait(()=>WebDriverBacked.TypeKeys(locator, value));}
		/// <summary>Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation). By default, there is no such delay, i.e., the delay is 0 milliseconds. the number of milliseconds to pause after operation</summary>
		public void setSpeed(String value){InvokeVoid(()=>WebDriverBacked.SetSpeed(value));}
		/// <summary>Get execution speed (i.e., get the millisecond length of the delay following each selenium operation). By default, there is no such delay, i.e., the delay is 0 milliseconds. See also setSpeed. the execution speed in milliseconds.</summary>
		public String getSpeed(){return InvokeReturn(WebDriverBacked.GetSpeed);}
		public void assertSpeed(String expected){InvokeAssert(WebDriverBacked.GetSpeed,expected,true);}
		public void assertNotSpeed(String expected){InvokeAssert(WebDriverBacked.GetSpeed,expected,false);}
		public String verifySpeed(String expected){return InvokeVerify(WebDriverBacked.GetSpeed,expected,true);}
		public String verifyNotSpeed(String expected){return InvokeVerify(WebDriverBacked.GetSpeed,expected,false);}
		public void waitForSpeed(String expected){InvokeWaitFor(WebDriverBacked.GetSpeed,expected,true);}
		public void waitForNotSpeed(String expected){InvokeWaitFor(WebDriverBacked.GetSpeed,expected,false);}
		/// <summary>Check a toggle-button (checkbox/radio) an element locator</summary>
		public void check(String locator){InvokeVoid(()=>WebDriverBacked.Check(locator));}
		public void checkAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.Check(locator));}
		/// <summary>Uncheck a toggle-button (checkbox/radio) an element locator</summary>
		public void uncheck(String locator){InvokeVoid(()=>WebDriverBacked.Uncheck(locator));}
		public void uncheckAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.Uncheck(locator));}
		/// <summary>Select an option from a drop-down using an option locator. Option locators provide different ways of specifying options of an HTML Select element (e.g. for selecting a specific option, or for asserting that the selected option satisfies a specification). There are several forms of Select Option Locator. label=labelPattern: matches options based on their labels, i.e. the visible text. (This is the default.) label=regexp:^[Oo]thervalue=valuePattern: matches options based on their values. value=otherid=id: matches options based on their ids. id=option1index=index: matches an option based on its index (offset from zero). index=2 If no option locator prefix is provided, the default behaviour is to match on label. an element locator identifying a drop-down menuan option locator (a label by default)</summary>
		public void select(String selectLocator, String optionLocator){InvokeVoid(()=>WebDriverBacked.Select(selectLocator, optionLocator));}
		public void selectAndWait(String selectLocator, String optionLocator){InvokeAndWait(()=>WebDriverBacked.Select(selectLocator, optionLocator));}
		/// <summary>Add a selection to the set of selected options in a multi-select element using an option locator. @see #doSelect for details of option locators an element locator identifying a multi-select boxan option locator (a label by default)</summary>
		public void addSelection(String locator, String optionLocator){InvokeVoid(()=>WebDriverBacked.AddSelection(locator, optionLocator));}
		public void addSelectionAndWait(String locator, String optionLocator){InvokeAndWait(()=>WebDriverBacked.AddSelection(locator, optionLocator));}
		/// <summary>Remove a selection from the set of selected options in a multi-select element using an option locator. @see #doSelect for details of option locators an element locator identifying a multi-select boxan option locator (a label by default)</summary>
		public void removeSelection(String locator, String optionLocator){InvokeVoid(()=>WebDriverBacked.RemoveSelection(locator, optionLocator));}
		public void removeSelectionAndWait(String locator, String optionLocator){InvokeAndWait(()=>WebDriverBacked.RemoveSelection(locator, optionLocator));}
		/// <summary>Unselects all of the selected options in a multi-select element. an element locator identifying a multi-select box</summary>
		public void removeAllSelections(String locator){InvokeVoid(()=>WebDriverBacked.RemoveAllSelections(locator));}
		public void removeAllSelectionsAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.RemoveAllSelections(locator));}
		/// <summary>Submit the specified form. This is particularly useful for forms without submit buttons, e.g. single-input \"Search\" forms. an element locator for the form you want to submit</summary>
		public void submit(String formLocator){InvokeVoid(()=>WebDriverBacked.Submit(formLocator));}
		public void submitAndWait(String formLocator){InvokeAndWait(()=>WebDriverBacked.Submit(formLocator));}
		/// <summary>Opens a popup window (if a window with that ID isn't already open). After opening the window, you'll need to select it using the selectWindow command. This command can also be a useful workaround for bug SEL-339. In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example). In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using an empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").the URL to open, which can be blankthe JavaScript window ID of the window to select</summary>
		public void openWindow(String url, String windowID){InvokeVoid(()=>WebDriverBacked.OpenWindow(url, windowID));}
		/// <summary>Selects a popup window using a window locator; once a popup window has been selected, all commands go to that window. To select the main window again, use null as the target. Window locators provide different ways of specifying the window object: by title, by internal JavaScript \"name,\" or by JavaScript variable. title=My Special Window: Finds the window using the text that appears in the title bar. Be careful; two windows can share the same title. If that happens, this locator will just pick one. name=myWindow: Finds the window using its internal JavaScript \"name\" property. This is the second parameter \"windowName\" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag) (which Selenium intercepts). var=variableName: Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current application window, e.g. \"window.foo = window.open(url);\". In those cases, you can open the window using \"var=foo\". If no window locator prefix is provided, we'll try to guess what you mean like this:1.) if windowID is null, (or the string \"null\") then it is assumed the user is referring to the original window instantiated by the browser).2.) if the value of the \"windowID\" parameter is a JavaScript variable name in the current application window, then it is assumed that this variable contains the return value from a call to the JavaScript window.open() method.3.) Otherwise, selenium looks in a hash it maintains that maps string names to window \"names\".4.) If that fails, we'll try looping over all of the known windows to try to find the appropriate \"title\". Since \"title\" is not necessarily unique, this may have unexpected behavior.If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages which identify the names of windows created via window.open (and therefore intercepted by Selenium). You will see messages like the following for each window as it is opened:debug: window.open call intercepted; window ID (which you can use with selectWindow()) is \"myNewWindow\"In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example). (This is bug SEL-339.) In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using an empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").the JavaScript window ID of the window to select</summary>
		public void selectWindow(String windowID){InvokeVoid(()=>WebDriverBacked.SelectWindow(windowID));}
		/// <summary>Simplifies the process of selecting a popup window (and does not offer functionality beyond what selectWindow() already provides). If windowID is either not specified, or specified as \"null\", the first non-top window is selected. The top window is the one that would be selected by selectWindow() without providing a windowID . This should not be used when more than one popup window is in play.Otherwise, the window will be looked up considering windowID as the following in order: 1) the \"name\" of the window, as specified to window.open(); 2) a javascript variable which is a reference to a window; and 3) the title of the window. This is the same ordered lookup performed by selectWindow .an identifier for the popup window, which can take on a number of different meanings</summary>
		public void selectPopUp(String windowID){InvokeVoid(()=>WebDriverBacked.SelectPopUp(windowID));}
		public void selectPopUpAndWait(String windowID){InvokeAndWait(()=>WebDriverBacked.SelectPopUp(windowID));}
		/// <summary>Selects the main window. Functionally equivalent to using selectWindow() and specifying no value for windowID. </summary>
		public void deselectPopUp(){InvokeVoid(WebDriverBacked.DeselectPopUp);}
		public void deselectPopUpAndWait(){InvokeAndWait(WebDriverBacked.DeselectPopUp);}
		/// <summary>Selects a frame within the current window. (You may invoke this command multiple times to select nested frames.) To select the parent frame, use \"relative=parent\" as a locator; to select the top frame, use \"relative=top\". You can also select a frame by its 0-based index number; select the first frame with \"index=0\", or the third frame with \"index=2\". You may also use a DOM expression to identify the frame you want directly, like this: dom=frames[\"main\"].frames[\"subframe\"]an element locator identifying a frame or iframe</summary>
		public void selectFrame(String locator){InvokeVoid(()=>WebDriverBacked.SelectFrame(locator));}
		/// <summary>Determine whether current/locator identify the frame containing this running code. This is useful in proxy injection mode, where this code runs in every browser frame and window, and sometimes the selenium server needs to identify the \"current\" frame. In this case, when the test calls selectFrame, this routine is called for each frame to figure out which one has been selected. The selected frame will return true, while all others will return false.starting framenew frame (which might be relative to the current one)true if the new frame is this code's window</summary>
		public Boolean getWhetherThisFrameMatchFrameExpression(String currentFrameString, String target){return InvokeReturn(()=>WebDriverBacked.GetWhetherThisFrameMatchFrameExpression(currentFrameString, target));}
		public void assertWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected){InvokeAssert(()=>WebDriverBacked.GetWhetherThisFrameMatchFrameExpression(currentFrameString, target),expected,true);}
		public void assertNotWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected){InvokeAssert(()=>WebDriverBacked.GetWhetherThisFrameMatchFrameExpression(currentFrameString, target),expected,false);}
		public String verifyWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected){return InvokeVerify(()=>WebDriverBacked.GetWhetherThisFrameMatchFrameExpression(currentFrameString, target),expected,true);}
		public String verifyNotWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected){return InvokeVerify(()=>WebDriverBacked.GetWhetherThisFrameMatchFrameExpression(currentFrameString, target),expected,false);}
		public void waitForWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected){InvokeWaitFor(()=>WebDriverBacked.GetWhetherThisFrameMatchFrameExpression(currentFrameString, target),expected,true);}
		public void waitForNotWhetherThisFrameMatchFrameExpression(String currentFrameString, String target, Boolean expected){InvokeWaitFor(()=>WebDriverBacked.GetWhetherThisFrameMatchFrameExpression(currentFrameString, target),expected,false);}
		/// <summary>Determine whether currentWindowString plus target identify the window containing this running code. This is useful in proxy injection mode, where this code runs in every browser frame and window, and sometimes the selenium server needs to identify the \"current\" window. In this case, when the test calls selectWindow, this routine is called for each window to figure out which one has been selected. The selected window will return true, while all others will return false.starting windownew window (which might be relative to the current one, e.g., \"_parent\")true if the new window is this code's window</summary>
		public Boolean getWhetherThisWindowMatchWindowExpression(String currentWindowString, String target){return InvokeReturn(()=>WebDriverBacked.GetWhetherThisWindowMatchWindowExpression(currentWindowString, target));}
		public void assertWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected){InvokeAssert(()=>WebDriverBacked.GetWhetherThisWindowMatchWindowExpression(currentWindowString, target),expected,true);}
		public void assertNotWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected){InvokeAssert(()=>WebDriverBacked.GetWhetherThisWindowMatchWindowExpression(currentWindowString, target),expected,false);}
		public String verifyWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected){return InvokeVerify(()=>WebDriverBacked.GetWhetherThisWindowMatchWindowExpression(currentWindowString, target),expected,true);}
		public String verifyNotWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected){return InvokeVerify(()=>WebDriverBacked.GetWhetherThisWindowMatchWindowExpression(currentWindowString, target),expected,false);}
		public void waitForWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected){InvokeWaitFor(()=>WebDriverBacked.GetWhetherThisWindowMatchWindowExpression(currentWindowString, target),expected,true);}
		public void waitForNotWhetherThisWindowMatchWindowExpression(String currentWindowString, String target, Boolean expected){InvokeWaitFor(()=>WebDriverBacked.GetWhetherThisWindowMatchWindowExpression(currentWindowString, target),expected,false);}
		/// <summary>Waits for a popup window to appear and load up. the JavaScript window \"name\" of the window that will appear (not the text of the title bar) If unspecified, or specified as \"null\", this command will wait for the first non-top window to appear (don't rely on this if you are working with multiple popups simultaneously).a timeout in milliseconds, after which the action will return with an error. If this value is not specified, the default Selenium timeout will be used. See the setTimeout() command.</summary>
		public void waitForPopUp(String windowID, Object timeoutms){InvokeVoid(()=>WebDriverBacked.WaitForPopUp(windowID, timeoutms.ToString()));}
		/// <summary>Instructs Selenium to return the specified answer string in response to the next JavaScript prompt [window.prompt()]. the answer to give in response to the prompt pop-up</summary>
		public void answerOnNextPrompt(String answer){InvokeVoid(()=>WebDriverBacked.AnswerOnNextPrompt(answer));}
		/// <summary>Simulates the user clicking the \"back\" button on their browser. </summary>
		public void goBack(){InvokeVoid(WebDriverBacked.GoBack);}
		public void goBackAndWait(){InvokeAndWait(WebDriverBacked.GoBack);}
		/// <summary>Simulates the user clicking the \"Refresh\" button on their browser. </summary>
		public void refresh(){InvokeVoid(WebDriverBacked.Refresh);}
		public void refreshAndWait(){InvokeAndWait(WebDriverBacked.Refresh);}
		/// <summary>Has an alert occurred? This function never throws an exception true if there is an alert</summary>
		public Boolean isAlertPresent(){return InvokeReturn(WebDriverBacked.IsAlertPresent);}
		public void assertAlertPresent(){InvokeAssert(WebDriverBacked.IsAlertPresent,true,true);}
		public String verifyAlertPresent(){return InvokeVerify(WebDriverBacked.IsAlertPresent,true,true);}
		public void waitForAlertPresent(){InvokeWaitFor(WebDriverBacked.IsAlertPresent,true,true);}
		public void assertAlertNotPresent(){InvokeAssert(WebDriverBacked.IsAlertPresent,false,true);}
		public String verifyAlertNotPresent(){return InvokeVerify(WebDriverBacked.IsAlertPresent,false,true);}
		public void waitForAlertNotPresent(){InvokeWaitFor(WebDriverBacked.IsAlertPresent,false,true);}
		/// <summary>Has a prompt occurred? This function never throws an exception true if there is a pending prompt</summary>
		public Boolean isPromptPresent(){return InvokeReturn(WebDriverBacked.IsPromptPresent);}
		public void assertPromptPresent(){InvokeAssert(WebDriverBacked.IsPromptPresent,true,true);}
		public String verifyPromptPresent(){return InvokeVerify(WebDriverBacked.IsPromptPresent,true,true);}
		public void waitForPromptPresent(){InvokeWaitFor(WebDriverBacked.IsPromptPresent,true,true);}
		public void assertPromptNotPresent(){InvokeAssert(WebDriverBacked.IsPromptPresent,false,true);}
		public String verifyPromptNotPresent(){return InvokeVerify(WebDriverBacked.IsPromptPresent,false,true);}
		public void waitForPromptNotPresent(){InvokeWaitFor(WebDriverBacked.IsPromptPresent,false,true);}
		/// <summary>Has confirm() been called? This function never throws an exception true if there is a pending confirmation</summary>
		public Boolean isConfirmationPresent(){return InvokeReturn(WebDriverBacked.IsConfirmationPresent);}
		public void assertConfirmationPresent(){InvokeAssert(WebDriverBacked.IsConfirmationPresent,true,true);}
		public String verifyConfirmationPresent(){return InvokeVerify(WebDriverBacked.IsConfirmationPresent,true,true);}
		public void waitForConfirmationPresent(){InvokeWaitFor(WebDriverBacked.IsConfirmationPresent,true,true);}
		public void assertConfirmationNotPresent(){InvokeAssert(WebDriverBacked.IsConfirmationPresent,false,true);}
		public String verifyConfirmationNotPresent(){return InvokeVerify(WebDriverBacked.IsConfirmationPresent,false,true);}
		public void waitForConfirmationNotPresent(){InvokeWaitFor(WebDriverBacked.IsConfirmationPresent,false,true);}
		/// <summary>Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts. Getting an alert has the same effect as manually clicking OK. If an alert is generated but you do not consume it with getAlert, the next Selenium action will fail.Under Selenium, JavaScript alerts will NOT pop up a visible alert dialog.Selenium does NOT support JavaScript alerts that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until someone manually clicks OK.The message of the most recent JavaScript alert</summary>
		public String getAlert(){return InvokeReturn(WebDriverBacked.GetAlert);}
		public void assertAlert(String expected){InvokeAssert(WebDriverBacked.GetAlert,expected,true);}
		public void assertNotAlert(String expected){InvokeAssert(WebDriverBacked.GetAlert,expected,false);}
		public String verifyAlert(String expected){return InvokeVerify(WebDriverBacked.GetAlert,expected,true);}
		public String verifyNotAlert(String expected){return InvokeVerify(WebDriverBacked.GetAlert,expected,false);}
		public void waitForAlert(String expected){InvokeWaitFor(WebDriverBacked.GetAlert,expected,true);}
		public void waitForNotAlert(String expected){InvokeWaitFor(WebDriverBacked.GetAlert,expected,false);}
		/// <summary>Retrieves the message of a JavaScript confirmation dialog generated during the previous action. By default, the confirm function will return true, having the same effect as manually clicking OK. This can be changed by prior execution of the chooseCancelOnNextConfirmation command. If an confirmation is generated but you do not consume it with getConfirmation, the next Selenium action will fail. NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible dialog. NOTE: Selenium does NOT support JavaScript confirmations that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until you manually click OK. the message of the most recent JavaScript confirmation dialog</summary>
		public String getConfirmation(){return InvokeReturn(WebDriverBacked.GetConfirmation);}
		public void assertConfirmation(String expected){InvokeAssert(WebDriverBacked.GetConfirmation,expected,true);}
		public void assertNotConfirmation(String expected){InvokeAssert(WebDriverBacked.GetConfirmation,expected,false);}
		public String verifyConfirmation(String expected){return InvokeVerify(WebDriverBacked.GetConfirmation,expected,true);}
		public String verifyNotConfirmation(String expected){return InvokeVerify(WebDriverBacked.GetConfirmation,expected,false);}
		public void waitForConfirmation(String expected){InvokeWaitFor(WebDriverBacked.GetConfirmation,expected,true);}
		public void waitForNotConfirmation(String expected){InvokeWaitFor(WebDriverBacked.GetConfirmation,expected,false);}
		/// <summary>Retrieves the message of a JavaScript question prompt dialog generated during the previous action. Successful handling of the prompt requires prior execution of the answerOnNextPrompt command. If a prompt is generated but you do not get/verify it, the next Selenium action will fail.NOTE: under Selenium, JavaScript prompts will NOT pop up a visible dialog.NOTE: Selenium does NOT support JavaScript prompts that are generated in a page's onload() event handler. In this case a visible dialog WILL be generated and Selenium will hang until someone manually clicks OK.the message of the most recent JavaScript question prompt</summary>
		public String getPrompt(){return InvokeReturn(WebDriverBacked.GetPrompt);}
		public void assertPrompt(String expected){InvokeAssert(WebDriverBacked.GetPrompt,expected,true);}
		public void assertNotPrompt(String expected){InvokeAssert(WebDriverBacked.GetPrompt,expected,false);}
		public String verifyPrompt(String expected){return InvokeVerify(WebDriverBacked.GetPrompt,expected,true);}
		public String verifyNotPrompt(String expected){return InvokeVerify(WebDriverBacked.GetPrompt,expected,false);}
		public void waitForPrompt(String expected){InvokeWaitFor(WebDriverBacked.GetPrompt,expected,true);}
		public void waitForNotPrompt(String expected){InvokeWaitFor(WebDriverBacked.GetPrompt,expected,false);}
		/// <summary>Gets the absolute URL of the current page. the absolute URL of the current page</summary>
		public String getLocation(){return InvokeReturn(WebDriverBacked.GetLocation);}
		public void assertLocation(String expected){InvokeAssert(WebDriverBacked.GetLocation,expected,true);}
		public void assertNotLocation(String expected){InvokeAssert(WebDriverBacked.GetLocation,expected,false);}
		public String verifyLocation(String expected){return InvokeVerify(WebDriverBacked.GetLocation,expected,true);}
		public String verifyNotLocation(String expected){return InvokeVerify(WebDriverBacked.GetLocation,expected,false);}
		public void waitForLocation(String expected){InvokeWaitFor(WebDriverBacked.GetLocation,expected,true);}
		public void waitForNotLocation(String expected){InvokeWaitFor(WebDriverBacked.GetLocation,expected,false);}
		/// <summary>Gets the title of the current page. the title of the current page</summary>
		public String getTitle(){return InvokeReturn(WebDriverBacked.GetTitle);}
		public void assertTitle(String expected){InvokeAssert(WebDriverBacked.GetTitle,expected,true);}
		public void assertNotTitle(String expected){InvokeAssert(WebDriverBacked.GetTitle,expected,false);}
		public String verifyTitle(String expected){return InvokeVerify(WebDriverBacked.GetTitle,expected,true);}
		public String verifyNotTitle(String expected){return InvokeVerify(WebDriverBacked.GetTitle,expected,false);}
		public void waitForTitle(String expected){InvokeWaitFor(WebDriverBacked.GetTitle,expected,true);}
		public void waitForNotTitle(String expected){InvokeWaitFor(WebDriverBacked.GetTitle,expected,false);}
		/// <summary>Gets the entire text of the page. the entire text of the page</summary>
		public String getBodyText(){return InvokeReturn(WebDriverBacked.GetBodyText);}
		public void assertBodyText(String expected){InvokeAssert(WebDriverBacked.GetBodyText,expected,true);}
		public void assertNotBodyText(String expected){InvokeAssert(WebDriverBacked.GetBodyText,expected,false);}
		public String verifyBodyText(String expected){return InvokeVerify(WebDriverBacked.GetBodyText,expected,true);}
		public String verifyNotBodyText(String expected){return InvokeVerify(WebDriverBacked.GetBodyText,expected,false);}
		public void waitForBodyText(String expected){InvokeWaitFor(WebDriverBacked.GetBodyText,expected,true);}
		public void waitForNotBodyText(String expected){InvokeWaitFor(WebDriverBacked.GetBodyText,expected,false);}
		/// <summary>Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter). For checkbox/radio elements, the value will be \"on\" or \"off\" depending on whether the element is checked or not. an element locatorthe element value, or \"on/off\" for checkbox/radio elements</summary>
		public String getValue(String locator){return InvokeReturn(()=>WebDriverBacked.GetValue(locator));}
		public void assertValue(String locator, String expected){InvokeAssert(()=>WebDriverBacked.GetValue(locator),expected,true);}
		public void assertNotValue(String locator, String expected){InvokeAssert(()=>WebDriverBacked.GetValue(locator),expected,false);}
		public String verifyValue(String locator, String expected){return InvokeVerify(()=>WebDriverBacked.GetValue(locator),expected,true);}
		public String verifyNotValue(String locator, String expected){return InvokeVerify(()=>WebDriverBacked.GetValue(locator),expected,false);}
		public void waitForValue(String locator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetValue(locator),expected,true);}
		public void waitForNotValue(String locator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetValue(locator),expected,false);}
		/// <summary>Gets the text of an element. This works for any element that contains text. This command uses either the textContent (Mozilla-like browsers) or the innerText (IE-like browsers) of the element, which is the rendered text shown to the user. an element locatorthe text of the element</summary>
		public String getText(String locator){return InvokeReturn(()=>WebDriverBacked.GetText(locator));}
		public void assertText(String locator, String expected){InvokeAssert(()=>WebDriverBacked.GetText(locator),expected,true);}
		public void assertNotText(String locator, String expected){InvokeAssert(()=>WebDriverBacked.GetText(locator),expected,false);}
		public String verifyText(String locator, String expected){return InvokeVerify(()=>WebDriverBacked.GetText(locator),expected,true);}
		public String verifyNotText(String locator, String expected){return InvokeVerify(()=>WebDriverBacked.GetText(locator),expected,false);}
		public void waitForText(String locator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetText(locator),expected,true);}
		public void waitForNotText(String locator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetText(locator),expected,false);}
		/// <summary>Briefly changes the backgroundColor of the specified element yellow. Useful for debugging. an element locator</summary>
		public void highlight(String locator){InvokeVoid(()=>WebDriverBacked.Highlight(locator));}
		public void highlightAndWait(String locator){InvokeAndWait(()=>WebDriverBacked.Highlight(locator));}
		/// <summary>Gets the result of evaluating the specified JavaScript snippet. The snippet may have multiple lines, but only the result of the last line will be returned. Note that, by default, the snippet will run in the context of the \"selenium\" object itself, so this will refer to the Selenium object. Use window to refer to the window of your application, e.g. window.document.getElementById('foo')If you need to use a locator to refer to a single element in your application page, you can use this.browserbot.findElement(\"id=foo\") where \"id=foo\" is your locator.the JavaScript snippet to runthe results of evaluating the snippet</summary>
		public String getEval(String script){return InvokeReturn(()=>WebDriverBacked.GetEval(script));}
		public void assertEval(String script, String expected){InvokeAssert(()=>WebDriverBacked.GetEval(script),expected,true);}
		public void assertNotEval(String script, String expected){InvokeAssert(()=>WebDriverBacked.GetEval(script),expected,false);}
		public String verifyEval(String script, String expected){return InvokeVerify(()=>WebDriverBacked.GetEval(script),expected,true);}
		public String verifyNotEval(String script, String expected){return InvokeVerify(()=>WebDriverBacked.GetEval(script),expected,false);}
		public void waitForEval(String script, String expected){InvokeWaitFor(()=>WebDriverBacked.GetEval(script),expected,true);}
		public void waitForNotEval(String script, String expected){InvokeWaitFor(()=>WebDriverBacked.GetEval(script),expected,false);}
		/// <summary>Gets whether a toggle-button (checkbox/radio) is checked. Fails if the specified element doesn't exist or isn't a toggle-button. an element locator pointing to a checkbox or radio buttontrue if the checkbox is checked, false otherwise</summary>
		public Boolean isChecked(String locator){return InvokeReturn(()=>WebDriverBacked.IsChecked(locator));}
		public void assertChecked(String locator){InvokeAssert(()=>WebDriverBacked.IsChecked(locator),true,true);}
		public String verifyChecked(String locator){return InvokeVerify(()=>WebDriverBacked.IsChecked(locator),true,true);}
		public void waitForChecked(String locator){InvokeWaitFor(()=>WebDriverBacked.IsChecked(locator),true,true);}
		public void assertNotChecked(String locator){InvokeAssert(()=>WebDriverBacked.IsChecked(locator),false,true);}
		public String verifyNotChecked(String locator){return InvokeVerify(()=>WebDriverBacked.IsChecked(locator),false,true);}
		public void waitForNotChecked(String locator){InvokeWaitFor(()=>WebDriverBacked.IsChecked(locator),false,true);}
		/// <summary>Gets the text from a cell of a table. The cellAddress syntax tableLocator.row.column, where row and column start at 0. a cell address, e.g. \"foo.1.4\"the text from the specified cell</summary>
		public String getTable(String tableCellAddress){return InvokeReturn(()=>WebDriverBacked.GetTable(tableCellAddress));}
		public void assertTable(String tableCellAddress, String expected){InvokeAssert(()=>WebDriverBacked.GetTable(tableCellAddress),expected,true);}
		public void assertNotTable(String tableCellAddress, String expected){InvokeAssert(()=>WebDriverBacked.GetTable(tableCellAddress),expected,false);}
		public String verifyTable(String tableCellAddress, String expected){return InvokeVerify(()=>WebDriverBacked.GetTable(tableCellAddress),expected,true);}
		public String verifyNotTable(String tableCellAddress, String expected){return InvokeVerify(()=>WebDriverBacked.GetTable(tableCellAddress),expected,false);}
		public void waitForTable(String tableCellAddress, String expected){InvokeWaitFor(()=>WebDriverBacked.GetTable(tableCellAddress),expected,true);}
		public void waitForNotTable(String tableCellAddress, String expected){InvokeWaitFor(()=>WebDriverBacked.GetTable(tableCellAddress),expected,false);}
		/// <summary>Gets all option labels (visible text) for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option labels in the specified select drop-down</summary>
		public Object getSelectedLabels(String selectLocator){return ToObjectArray(InvokeReturn(()=>WebDriverBacked.GetSelectedLabels(selectLocator)));}
		public void assertSelectedLabels(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedLabels(selectLocator),ToStringArray(expected),true);}
		public void assertNotSelectedLabels(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedLabels(selectLocator),ToStringArray(expected),false);}
		public String verifySelectedLabels(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedLabels(selectLocator),ToStringArray(expected),true);}
		public String verifyNotSelectedLabels(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedLabels(selectLocator),ToStringArray(expected),false);}
		public void waitForSelectedLabels(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedLabels(selectLocator),ToStringArray(expected),true);}
		public void waitForNotSelectedLabels(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedLabels(selectLocator),ToStringArray(expected),false);}
		/// <summary>Gets option label (visible text) for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option label in the specified select drop-down</summary>
		public String getSelectedLabel(String selectLocator){return InvokeReturn(()=>WebDriverBacked.GetSelectedLabel(selectLocator));}
		public void assertSelectedLabel(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedLabel(selectLocator),expected,true);}
		public void assertNotSelectedLabel(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedLabel(selectLocator),expected,false);}
		public String verifySelectedLabel(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedLabel(selectLocator),expected,true);}
		public String verifyNotSelectedLabel(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedLabel(selectLocator),expected,false);}
		public void waitForSelectedLabel(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedLabel(selectLocator),expected,true);}
		public void waitForNotSelectedLabel(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedLabel(selectLocator),expected,false);}
		/// <summary>Gets all option values (value attributes) for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option values in the specified select drop-down</summary>
		public Object getSelectedValues(String selectLocator){return ToObjectArray(InvokeReturn(()=>WebDriverBacked.GetSelectedValues(selectLocator)));}
		public void assertSelectedValues(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedValues(selectLocator),ToStringArray(expected),true);}
		public void assertNotSelectedValues(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedValues(selectLocator),ToStringArray(expected),false);}
		public String verifySelectedValues(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedValues(selectLocator),ToStringArray(expected),true);}
		public String verifyNotSelectedValues(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedValues(selectLocator),ToStringArray(expected),false);}
		public void waitForSelectedValues(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedValues(selectLocator),ToStringArray(expected),true);}
		public void waitForNotSelectedValues(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedValues(selectLocator),ToStringArray(expected),false);}
		/// <summary>Gets option value (value attribute) for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option value in the specified select drop-down</summary>
		public String getSelectedValue(String selectLocator){return InvokeReturn(()=>WebDriverBacked.GetSelectedValue(selectLocator));}
		public void assertSelectedValue(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedValue(selectLocator),expected,true);}
		public void assertNotSelectedValue(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedValue(selectLocator),expected,false);}
		public String verifySelectedValue(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedValue(selectLocator),expected,true);}
		public String verifyNotSelectedValue(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedValue(selectLocator),expected,false);}
		public void waitForSelectedValue(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedValue(selectLocator),expected,true);}
		public void waitForNotSelectedValue(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedValue(selectLocator),expected,false);}
		/// <summary>Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option indexes in the specified select drop-down</summary>
		public Object getSelectedIndexes(String selectLocator){return ToObjectArray(InvokeReturn(()=>WebDriverBacked.GetSelectedIndexes(selectLocator)));}
		public void assertSelectedIndexes(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedIndexes(selectLocator),ToStringArray(expected),true);}
		public void assertNotSelectedIndexes(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedIndexes(selectLocator),ToStringArray(expected),false);}
		public String verifySelectedIndexes(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedIndexes(selectLocator),ToStringArray(expected),true);}
		public String verifyNotSelectedIndexes(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedIndexes(selectLocator),ToStringArray(expected),false);}
		public void waitForSelectedIndexes(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedIndexes(selectLocator),ToStringArray(expected),true);}
		public void waitForNotSelectedIndexes(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedIndexes(selectLocator),ToStringArray(expected),false);}
		/// <summary>Gets option index (option number, starting at 0) for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option index in the specified select drop-down</summary>
		public String getSelectedIndex(String selectLocator){return InvokeReturn(()=>WebDriverBacked.GetSelectedIndex(selectLocator));}
		public void assertSelectedIndex(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedIndex(selectLocator),expected,true);}
		public void assertNotSelectedIndex(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedIndex(selectLocator),expected,false);}
		public String verifySelectedIndex(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedIndex(selectLocator),expected,true);}
		public String verifyNotSelectedIndex(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedIndex(selectLocator),expected,false);}
		public void waitForSelectedIndex(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedIndex(selectLocator),expected,true);}
		public void waitForNotSelectedIndex(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedIndex(selectLocator),expected,false);}
		/// <summary>Gets all option element IDs for selected options in the specified select or multi-select element. an element locator identifying a drop-down menuan array of all selected option IDs in the specified select drop-down</summary>
		public Object getSelectedIds(String selectLocator){return ToObjectArray(InvokeReturn(()=>WebDriverBacked.GetSelectedIds(selectLocator)));}
		public void assertSelectedIds(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedIds(selectLocator),ToStringArray(expected),true);}
		public void assertNotSelectedIds(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectedIds(selectLocator),ToStringArray(expected),false);}
		public String verifySelectedIds(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedIds(selectLocator),ToStringArray(expected),true);}
		public String verifyNotSelectedIds(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedIds(selectLocator),ToStringArray(expected),false);}
		public void waitForSelectedIds(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedIds(selectLocator),ToStringArray(expected),true);}
		public void waitForNotSelectedIds(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedIds(selectLocator),ToStringArray(expected),false);}
		/// <summary>Gets option element ID for selected option in the specified select element. an element locator identifying a drop-down menuthe selected option ID in the specified select drop-down</summary>
		public String getSelectedId(String selectLocator){return InvokeReturn(()=>WebDriverBacked.GetSelectedId(selectLocator));}
		public void assertSelectedId(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedId(selectLocator),expected,true);}
		public void assertNotSelectedId(String selectLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetSelectedId(selectLocator),expected,false);}
		public String verifySelectedId(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedId(selectLocator),expected,true);}
		public String verifyNotSelectedId(String selectLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetSelectedId(selectLocator),expected,false);}
		public void waitForSelectedId(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedId(selectLocator),expected,true);}
		public void waitForNotSelectedId(String selectLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectedId(selectLocator),expected,false);}
		/// <summary>Determines whether some option in a drop-down menu is selected. an element locator identifying a drop-down menutrue if some option has been selected, false otherwise</summary>
		public Boolean isSomethingSelected(String selectLocator){return InvokeReturn(()=>WebDriverBacked.IsSomethingSelected(selectLocator));}
		public void assertSomethingSelected(String selectLocator){InvokeAssert(()=>WebDriverBacked.IsSomethingSelected(selectLocator),true,true);}
		public String verifySomethingSelected(String selectLocator){return InvokeVerify(()=>WebDriverBacked.IsSomethingSelected(selectLocator),true,true);}
		public void waitForSomethingSelected(String selectLocator){InvokeWaitFor(()=>WebDriverBacked.IsSomethingSelected(selectLocator),true,true);}
		public void assertNotSomethingSelected(String selectLocator){InvokeAssert(()=>WebDriverBacked.IsSomethingSelected(selectLocator),false,true);}
		public String verifyNotSomethingSelected(String selectLocator){return InvokeVerify(()=>WebDriverBacked.IsSomethingSelected(selectLocator),false,true);}
		public void waitForNotSomethingSelected(String selectLocator){InvokeWaitFor(()=>WebDriverBacked.IsSomethingSelected(selectLocator),false,true);}
		/// <summary>Gets all option labels in the specified select drop-down. an element locator identifying a drop-down menuan array of all option labels in the specified select drop-down</summary>
		public Object getSelectOptions(String selectLocator){return ToObjectArray(InvokeReturn(()=>WebDriverBacked.GetSelectOptions(selectLocator)));}
		public void assertSelectOptions(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectOptions(selectLocator),ToStringArray(expected),true);}
		public void assertNotSelectOptions(String selectLocator, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetSelectOptions(selectLocator),ToStringArray(expected),false);}
		public String verifySelectOptions(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectOptions(selectLocator),ToStringArray(expected),true);}
		public String verifyNotSelectOptions(String selectLocator, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetSelectOptions(selectLocator),ToStringArray(expected),false);}
		public void waitForSelectOptions(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectOptions(selectLocator),ToStringArray(expected),true);}
		public void waitForNotSelectOptions(String selectLocator, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetSelectOptions(selectLocator),ToStringArray(expected),false);}
		/// <summary>Gets the value of an element attribute. The value of the attribute may differ across browsers (this is the case for the \"style\" attribute, for example). an element locator followed by an @ sign and then the name of the attribute, e.g. \"foo@bar\"the value of the specified attribute</summary>
		public String getAttribute(String attributeLocator){return InvokeReturn(()=>WebDriverBacked.GetAttribute(attributeLocator));}
		public void assertAttribute(String attributeLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetAttribute(attributeLocator),expected,true);}
		public void assertNotAttribute(String attributeLocator, String expected){InvokeAssert(()=>WebDriverBacked.GetAttribute(attributeLocator),expected,false);}
		public String verifyAttribute(String attributeLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetAttribute(attributeLocator),expected,true);}
		public String verifyNotAttribute(String attributeLocator, String expected){return InvokeVerify(()=>WebDriverBacked.GetAttribute(attributeLocator),expected,false);}
		public void waitForAttribute(String attributeLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetAttribute(attributeLocator),expected,true);}
		public void waitForNotAttribute(String attributeLocator, String expected){InvokeWaitFor(()=>WebDriverBacked.GetAttribute(attributeLocator),expected,false);}
		/// <summary>Verifies that the specified text pattern appears somewhere on the rendered page shown to the user. a pattern to match with the text of the pagetrue if the pattern matches the text, false otherwise</summary>
		public Boolean isTextPresent(String pattern){return InvokeReturn(()=>WebDriverBacked.IsTextPresent(pattern));}
		public void assertTextPresent(String pattern){InvokeAssert(()=>WebDriverBacked.IsTextPresent(pattern),true,true);}
		public String verifyTextPresent(String pattern){return InvokeVerify(()=>WebDriverBacked.IsTextPresent(pattern),true,true);}
		public void waitForTextPresent(String pattern){InvokeWaitFor(()=>WebDriverBacked.IsTextPresent(pattern),true,true);}
		public void assertTextNotPresent(String pattern){InvokeAssert(()=>WebDriverBacked.IsTextPresent(pattern),false,true);}
		public String verifyTextNotPresent(String pattern){return InvokeVerify(()=>WebDriverBacked.IsTextPresent(pattern),false,true);}
		public void waitForTextNotPresent(String pattern){InvokeWaitFor(()=>WebDriverBacked.IsTextPresent(pattern),false,true);}
		/// <summary>Verifies that the specified element is somewhere on the page. an element locatortrue if the element is present, false otherwise</summary>
		//public Boolean isElementPresent(String locator){return InvokeReturn(()=>WebDriverBacked.IsElementPresent(locator));}
		public void assertElementPresent(String locator){InvokeAssert(()=>WebDriverBacked.IsElementPresent(locator),true,true);}
		public String verifyElementPresent(String locator){return InvokeVerify(()=>WebDriverBacked.IsElementPresent(locator),true,true);}
		public void waitForElementPresent(String locator){InvokeWaitFor(()=>WebDriverBacked.IsElementPresent(locator),true,true);}
		public void assertElementNotPresent(String locator){InvokeAssert(()=>WebDriverBacked.IsElementPresent(locator),false,true);}
		public String verifyElementNotPresent(String locator){return InvokeVerify(()=>WebDriverBacked.IsElementPresent(locator),false,true);}
		public void waitForElementNotPresent(String locator){InvokeWaitFor(()=>WebDriverBacked.IsElementPresent(locator),false,true);}
		/// <summary>Determines if the specified element is visible. An element can be rendered invisible by setting the CSS \"visibility\" property to \"hidden\", or the \"display\" property to \"none\", either for the element itself or one if its ancestors. This method will fail if the element is not present. an element locatortrue if the specified element is visible, false otherwise</summary>
		public Boolean isVisible(String locator){return InvokeReturn(()=>WebDriverBacked.IsVisible(locator));}
		public void assertVisible(String locator){InvokeAssert(()=>WebDriverBacked.IsVisible(locator),true,true);}
		public String verifyVisible(String locator){return InvokeVerify(()=>WebDriverBacked.IsVisible(locator),true,true);}
		public void waitForVisible(String locator){InvokeWaitFor(()=>WebDriverBacked.IsVisible(locator),true,true);}
		public void assertNotVisible(String locator){InvokeAssert(()=>WebDriverBacked.IsVisible(locator),false,true);}
		public String verifyNotVisible(String locator){return InvokeVerify(()=>WebDriverBacked.IsVisible(locator),false,true);}
		public void waitForNotVisible(String locator){InvokeWaitFor(()=>WebDriverBacked.IsVisible(locator),false,true);}
		/// <summary>Determines whether the specified input element is editable, ie hasn't been disabled. This method will fail if the specified element isn't an input element. an element locatortrue if the input element is editable, false otherwise</summary>
		public Boolean isEditable(String locator){return InvokeReturn(()=>WebDriverBacked.IsEditable(locator));}
		public void assertEditable(String locator){InvokeAssert(()=>WebDriverBacked.IsEditable(locator),true,true);}
		public String verifyEditable(String locator){return InvokeVerify(()=>WebDriverBacked.IsEditable(locator),true,true);}
		public void waitForEditable(String locator){InvokeWaitFor(()=>WebDriverBacked.IsEditable(locator),true,true);}
		public void assertNotEditable(String locator){InvokeAssert(()=>WebDriverBacked.IsEditable(locator),false,true);}
		public String verifyNotEditable(String locator){return InvokeVerify(()=>WebDriverBacked.IsEditable(locator),false,true);}
		public void waitForNotEditable(String locator){InvokeWaitFor(()=>WebDriverBacked.IsEditable(locator),false,true);}
		/// <summary>Returns the IDs of all buttons on the page. If a given button has no ID, it will appear as \"\" in this array.the IDs of all buttons on the page</summary>
		public Object getAllButtons(){return ToObjectArray(InvokeReturn(WebDriverBacked.GetAllButtons));}
		public void assertAllButtons(Object[] expected){InvokeAssert(WebDriverBacked.GetAllButtons,ToStringArray(expected),true);}
		public void assertNotAllButtons(Object[] expected){InvokeAssert(WebDriverBacked.GetAllButtons,ToStringArray(expected),false);}
		public String verifyAllButtons(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllButtons,ToStringArray(expected),true);}
		public String verifyNotAllButtons(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllButtons,ToStringArray(expected),false);}
		public void waitForAllButtons(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllButtons,ToStringArray(expected),true);}
		public void waitForNotAllButtons(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllButtons,ToStringArray(expected),false);}
		/// <summary>Returns the IDs of all links on the page. If a given link has no ID, it will appear as \"\" in this array.the IDs of all links on the page</summary>
		public Object getAllLinks(){return ToObjectArray(InvokeReturn(WebDriverBacked.GetAllLinks));}
		public void assertAllLinks(Object[] expected){InvokeAssert(WebDriverBacked.GetAllLinks,ToStringArray(expected),true);}
		public void assertNotAllLinks(Object[] expected){InvokeAssert(WebDriverBacked.GetAllLinks,ToStringArray(expected),false);}
		public String verifyAllLinks(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllLinks,ToStringArray(expected),true);}
		public String verifyNotAllLinks(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllLinks,ToStringArray(expected),false);}
		public void waitForAllLinks(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllLinks,ToStringArray(expected),true);}
		public void waitForNotAllLinks(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllLinks,ToStringArray(expected),false);}
		/// <summary>Returns the IDs of all input fields on the page. If a given field has no ID, it will appear as \"\" in this array.the IDs of all field on the page</summary>
		public Object getAllFields(){return ToObjectArray(InvokeReturn(WebDriverBacked.GetAllFields));}
		public void assertAllFields(Object[] expected){InvokeAssert(WebDriverBacked.GetAllFields,ToStringArray(expected),true);}
		public void assertNotAllFields(Object[] expected){InvokeAssert(WebDriverBacked.GetAllFields,ToStringArray(expected),false);}
		public String verifyAllFields(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllFields,ToStringArray(expected),true);}
		public String verifyNotAllFields(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllFields,ToStringArray(expected),false);}
		public void waitForAllFields(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllFields,ToStringArray(expected),true);}
		public void waitForNotAllFields(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllFields,ToStringArray(expected),false);}
		/// <summary>Returns an array of JavaScript property values from all known windows having one. name of an attribute on the windowsthe set of values of this attribute from all known windows.</summary>
		public Object getAttributeFromAllWindows(String attributeName){return ToObjectArray(InvokeReturn(()=>WebDriverBacked.GetAttributeFromAllWindows(attributeName)));}
		public void assertAttributeFromAllWindows(String attributeName, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetAttributeFromAllWindows(attributeName),ToStringArray(expected),true);}
		public void assertNotAttributeFromAllWindows(String attributeName, Object[] expected){InvokeAssert(()=>WebDriverBacked.GetAttributeFromAllWindows(attributeName),ToStringArray(expected),false);}
		public String verifyAttributeFromAllWindows(String attributeName, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetAttributeFromAllWindows(attributeName),ToStringArray(expected),true);}
		public String verifyNotAttributeFromAllWindows(String attributeName, Object[] expected){return InvokeVerify(()=>WebDriverBacked.GetAttributeFromAllWindows(attributeName),ToStringArray(expected),false);}
		public void waitForAttributeFromAllWindows(String attributeName, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetAttributeFromAllWindows(attributeName),ToStringArray(expected),true);}
		public void waitForNotAttributeFromAllWindows(String attributeName, Object[] expected){InvokeWaitFor(()=>WebDriverBacked.GetAttributeFromAllWindows(attributeName),ToStringArray(expected),false);}
		/// <summary>deprecated - use dragAndDrop instead an element locatoroffset in pixels from the current location to which the element should be moved, e.g., \"+70,-300\"</summary>
		public void dragdrop(String locator, String movementsString){InvokeVoid(()=>WebDriverBacked.Dragdrop(locator, movementsString));}
		public void dragdropAndWait(String locator, String movementsString){InvokeAndWait(()=>WebDriverBacked.Dragdrop(locator, movementsString));}
		/// <summary>Configure the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10). Setting this value to 0 means that we'll send a \"mousemove\" event to every single pixel in between the start location and the end location; that can be very slow, and may cause some browsers to force the JavaScript to timeout.If the mouse speed is greater than the distance between the two dragged objects, we'll just send one \"mousemove\" at the start location and then one final one at the end location.the number of pixels between \"mousemove\" events</summary>
		public void setMouseSpeed(String pixels){InvokeVoid(()=>WebDriverBacked.SetMouseSpeed(pixels));}
		/// <summary>Returns the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10). the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10)</summary>
		public Double getMouseSpeed(){return ToDouble(InvokeReturn(WebDriverBacked.GetMouseSpeed));}
		public void assertMouseSpeed(Double expected){InvokeAssert(WebDriverBacked.GetMouseSpeed,ToDecimal(expected),true);}
		public void assertNotMouseSpeed(Double expected){InvokeAssert(WebDriverBacked.GetMouseSpeed,ToDecimal(expected),false);}
		public String verifyMouseSpeed(Double expected){return InvokeVerify(WebDriverBacked.GetMouseSpeed,ToDecimal(expected),true);}
		public String verifyNotMouseSpeed(Double expected){return InvokeVerify(WebDriverBacked.GetMouseSpeed,ToDecimal(expected),false);}
		public void waitForMouseSpeed(Double expected){InvokeWaitFor(WebDriverBacked.GetMouseSpeed,ToDecimal(expected),true);}
		public void waitForNotMouseSpeed(Double expected){InvokeWaitFor(WebDriverBacked.GetMouseSpeed,ToDecimal(expected),false);}
		/// <summary>Drags an element a certain distance and then drops it an element locatoroffset in pixels from the current location to which the element should be moved, e.g., \"+70,-300\"</summary>
		public void dragAndDrop(String locator, String movementsString){InvokeVoid(()=>WebDriverBacked.DragAndDrop(locator, movementsString));}
		public void dragAndDropAndWait(String locator, String movementsString){InvokeAndWait(()=>WebDriverBacked.DragAndDrop(locator, movementsString));}
		/// <summary>Drags an element and drops it on another element an element to be draggedan element whose location (i.e., whose center-most pixel) will be the point where locatorOfObjectToBeDragged is dropped</summary>
		public void dragAndDropToObject(String locatorOfObjectToBeDragged, String locatorOfDragDestinationObject){InvokeVoid(()=>WebDriverBacked.DragAndDropToObject(locatorOfObjectToBeDragged, locatorOfDragDestinationObject));}
		public void dragAndDropToObjectAndWait(String locatorOfObjectToBeDragged, String locatorOfDragDestinationObject){InvokeAndWait(()=>WebDriverBacked.DragAndDropToObject(locatorOfObjectToBeDragged, locatorOfDragDestinationObject));}
		/// <summary>Gives focus to the currently selected window </summary>
		public void windowFocus(){InvokeVoid(WebDriverBacked.WindowFocus);}
		/// <summary>Returns the IDs of all windows that the browser knows about in an array. Array of identifiers of all windows that the browser knows about.</summary>
		public Object getAllWindowIds(){return ToObjectArray(InvokeReturn(WebDriverBacked.GetAllWindowIds));}
		public void assertAllWindowIds(Object[] expected){InvokeAssert(WebDriverBacked.GetAllWindowIds,ToStringArray(expected),true);}
		public void assertNotAllWindowIds(Object[] expected){InvokeAssert(WebDriverBacked.GetAllWindowIds,ToStringArray(expected),false);}
		public String verifyAllWindowIds(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllWindowIds,ToStringArray(expected),true);}
		public String verifyNotAllWindowIds(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllWindowIds,ToStringArray(expected),false);}
		public void waitForAllWindowIds(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllWindowIds,ToStringArray(expected),true);}
		public void waitForNotAllWindowIds(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllWindowIds,ToStringArray(expected),false);}
		/// <summary>Returns the names of all windows that the browser knows about in an array. Array of names of all windows that the browser knows about.</summary>
		public Object getAllWindowNames(){return ToObjectArray(InvokeReturn(WebDriverBacked.GetAllWindowNames));}
		public void assertAllWindowNames(Object[] expected){InvokeAssert(WebDriverBacked.GetAllWindowNames,ToStringArray(expected),true);}
		public void assertNotAllWindowNames(Object[] expected){InvokeAssert(WebDriverBacked.GetAllWindowNames,ToStringArray(expected),false);}
		public String verifyAllWindowNames(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllWindowNames,ToStringArray(expected),true);}
		public String verifyNotAllWindowNames(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllWindowNames,ToStringArray(expected),false);}
		public void waitForAllWindowNames(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllWindowNames,ToStringArray(expected),true);}
		public void waitForNotAllWindowNames(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllWindowNames,ToStringArray(expected),false);}
		/// <summary>Returns the titles of all windows that the browser knows about in an array. Array of titles of all windows that the browser knows about.</summary>
		public Object getAllWindowTitles(){return ToObjectArray(InvokeReturn(WebDriverBacked.GetAllWindowTitles));}
		public void assertAllWindowTitles(Object[] expected){InvokeAssert(WebDriverBacked.GetAllWindowTitles,ToStringArray(expected),true);}
		public void assertNotAllWindowTitles(Object[] expected){InvokeAssert(WebDriverBacked.GetAllWindowTitles,ToStringArray(expected),false);}
		public String verifyAllWindowTitles(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllWindowTitles,ToStringArray(expected),true);}
		public String verifyNotAllWindowTitles(Object[] expected){return InvokeVerify(WebDriverBacked.GetAllWindowTitles,ToStringArray(expected),false);}
		public void waitForAllWindowTitles(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllWindowTitles,ToStringArray(expected),true);}
		public void waitForNotAllWindowTitles(Object[] expected){InvokeWaitFor(WebDriverBacked.GetAllWindowTitles,ToStringArray(expected),false);}
		/// <summary>Returns the entire HTML source between the opening and closing \"html\" tags. the entire HTML source</summary>
		public String getHtmlSource(){return InvokeReturn(WebDriverBacked.GetHtmlSource);}
		public void assertHtmlSource(String expected){InvokeAssert(WebDriverBacked.GetHtmlSource,expected,true);}
		public void assertNotHtmlSource(String expected){InvokeAssert(WebDriverBacked.GetHtmlSource,expected,false);}
		public String verifyHtmlSource(String expected){return InvokeVerify(WebDriverBacked.GetHtmlSource,expected,true);}
		public String verifyNotHtmlSource(String expected){return InvokeVerify(WebDriverBacked.GetHtmlSource,expected,false);}
		public void waitForHtmlSource(String expected){InvokeWaitFor(WebDriverBacked.GetHtmlSource,expected,true);}
		public void waitForNotHtmlSource(String expected){InvokeWaitFor(WebDriverBacked.GetHtmlSource,expected,false);}
		/// <summary>Moves the text cursor to the specified position in the given input element or textarea. This method will fail if the specified element isn't an input element or textarea. an element locator pointing to an input element or textareathe numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field. You can also set the cursor to -1 to move it to the end of the field.</summary>
		public void setCursorPosition(String locator, String position){InvokeVoid(()=>WebDriverBacked.SetCursorPosition(locator, position));}
		/// <summary>Get the relative index of an element to its parent (starting from 0). The comment node and empty text node will be ignored. an element locator pointing to an elementof relative index of the element to its parent (starting from 0)</summary>
		public Double getElementIndex(String locator){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetElementIndex(locator)));}
		public void assertElementIndex(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementIndex(locator),ToDecimal(expected),true);}
		public void assertNotElementIndex(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementIndex(locator),ToDecimal(expected),false);}
		public String verifyElementIndex(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementIndex(locator),ToDecimal(expected),true);}
		public String verifyNotElementIndex(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementIndex(locator),ToDecimal(expected),false);}
		public void waitForElementIndex(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementIndex(locator),ToDecimal(expected),true);}
		public void waitForNotElementIndex(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementIndex(locator),ToDecimal(expected),false);}
		/// <summary>Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will not be considered ordered. an element locator pointing to the first elementan element locator pointing to the second elementtrue if element1 is the previous sibling of element2, false otherwise</summary>
		public Boolean isOrdered(String locator1, String locator2){return InvokeReturn(()=>WebDriverBacked.IsOrdered(locator1, locator2));}
		public void assertOrdered(String locator1, String locator2){InvokeAssert(()=>WebDriverBacked.IsOrdered(locator1, locator2),true,true);}
		public String verifyOrdered(String locator1, String locator2){return InvokeVerify(()=>WebDriverBacked.IsOrdered(locator1, locator2),true,true);}
		public void waitForOrdered(String locator1, String locator2){InvokeWaitFor(()=>WebDriverBacked.IsOrdered(locator1, locator2),true,true);}
		public void assertNotOrdered(String locator1, String locator2){InvokeAssert(()=>WebDriverBacked.IsOrdered(locator1, locator2),false,true);}
		public String verifyNotOrdered(String locator1, String locator2){return InvokeVerify(()=>WebDriverBacked.IsOrdered(locator1, locator2),false,true);}
		public void waitForNotOrdered(String locator1, String locator2){InvokeWaitFor(()=>WebDriverBacked.IsOrdered(locator1, locator2),false,true);}
		/// <summary>Retrieves the horizontal position of an element an element locator pointing to an element OR an element itselfof pixels from the edge of the frame.</summary>
		public Double getElementPositionLeft(String locator){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetElementPositionLeft(locator)));}
		public void assertElementPositionLeft(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementPositionLeft(locator),ToDecimal(expected),true);}
		public void assertNotElementPositionLeft(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementPositionLeft(locator),ToDecimal(expected),false);}
		public String verifyElementPositionLeft(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementPositionLeft(locator),ToDecimal(expected),true);}
		public String verifyNotElementPositionLeft(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementPositionLeft(locator),ToDecimal(expected),false);}
		public void waitForElementPositionLeft(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementPositionLeft(locator),ToDecimal(expected),true);}
		public void waitForNotElementPositionLeft(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementPositionLeft(locator),ToDecimal(expected),false);}
		/// <summary>Retrieves the vertical position of an element an element locator pointing to an element OR an element itselfof pixels from the edge of the frame.</summary>
		public Double getElementPositionTop(String locator){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetElementPositionTop(locator)));}
		public void assertElementPositionTop(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementPositionTop(locator),ToDecimal(expected),true);}
		public void assertNotElementPositionTop(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementPositionTop(locator),ToDecimal(expected),false);}
		public String verifyElementPositionTop(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementPositionTop(locator),ToDecimal(expected),true);}
		public String verifyNotElementPositionTop(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementPositionTop(locator),ToDecimal(expected),false);}
		public void waitForElementPositionTop(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementPositionTop(locator),ToDecimal(expected),true);}
		public void waitForNotElementPositionTop(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementPositionTop(locator),ToDecimal(expected),false);}
		/// <summary>Retrieves the width of an element an element locator pointing to an elementwidth of an element in pixels</summary>
		public Double getElementWidth(String locator){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetElementWidth(locator)));}
		public void assertElementWidth(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementWidth(locator),ToDecimal(expected),true);}
		public void assertNotElementWidth(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementWidth(locator),ToDecimal(expected),false);}
		public String verifyElementWidth(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementWidth(locator),ToDecimal(expected),true);}
		public String verifyNotElementWidth(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementWidth(locator),ToDecimal(expected),false);}
		public void waitForElementWidth(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementWidth(locator),ToDecimal(expected),true);}
		public void waitForNotElementWidth(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementWidth(locator),ToDecimal(expected),false);}
		/// <summary>Retrieves the height of an element an element locator pointing to an elementheight of an element in pixels</summary>
		public Double getElementHeight(String locator){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetElementHeight(locator)));}
		public void assertElementHeight(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementHeight(locator),ToDecimal(expected),true);}
		public void assertNotElementHeight(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetElementHeight(locator),ToDecimal(expected),false);}
		public String verifyElementHeight(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementHeight(locator),ToDecimal(expected),true);}
		public String verifyNotElementHeight(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetElementHeight(locator),ToDecimal(expected),false);}
		public void waitForElementHeight(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementHeight(locator),ToDecimal(expected),true);}
		public void waitForNotElementHeight(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetElementHeight(locator),ToDecimal(expected),false);}
		/// <summary>Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers. Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to return the position of the last location of the cursor, even though the cursor is now gone from the page. This is filed as SEL-243. This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element. an element locator pointing to an input element or textareathe numerical position of the cursor in the field</summary>
		public Double getCursorPosition(String locator){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetCursorPosition(locator)));}
		public void assertCursorPosition(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetCursorPosition(locator),ToDecimal(expected),true);}
		public void assertNotCursorPosition(String locator, Double expected){InvokeAssert(()=>WebDriverBacked.GetCursorPosition(locator),ToDecimal(expected),false);}
		public String verifyCursorPosition(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetCursorPosition(locator),ToDecimal(expected),true);}
		public String verifyNotCursorPosition(String locator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetCursorPosition(locator),ToDecimal(expected),false);}
		public void waitForCursorPosition(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetCursorPosition(locator),ToDecimal(expected),true);}
		public void waitForNotCursorPosition(String locator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetCursorPosition(locator),ToDecimal(expected),false);}
		/// <summary>Returns the specified expression. This is useful because of JavaScript preprocessing. It is used to generate commands like assertExpression and waitForExpression.the value to returnthe value passed in</summary>
		public String getExpression(String expression){return InvokeReturn(()=>WebDriverBacked.GetExpression(expression));}
		public void assertExpression(String expression, String expected){InvokeAssert(()=>WebDriverBacked.GetExpression(expression),expected,true);}
		public void assertNotExpression(String expression, String expected){InvokeAssert(()=>WebDriverBacked.GetExpression(expression),expected,false);}
		public String verifyExpression(String expression, String expected){return InvokeVerify(()=>WebDriverBacked.GetExpression(expression),expected,true);}
		public String verifyNotExpression(String expression, String expected){return InvokeVerify(()=>WebDriverBacked.GetExpression(expression),expected,false);}
		public void waitForExpression(String expression, String expected){InvokeWaitFor(()=>WebDriverBacked.GetExpression(expression),expected,true);}
		public void waitForNotExpression(String expression, String expected){InvokeWaitFor(()=>WebDriverBacked.GetExpression(expression),expected,false);}
		/// <summary>Returns the number of nodes that match the specified xpath, eg. \"//table\" would give the number of tables. the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.the number of nodes that match the specified xpath</summary>
		public Double getXpathCount(String xpath){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetXpathCount(xpath)));}
		public void assertXpathCount(String xpath, Double expected){InvokeAssert(()=>WebDriverBacked.GetXpathCount(xpath),ToDecimal(expected),true);}
		public void assertNotXpathCount(String xpath, Double expected){InvokeAssert(()=>WebDriverBacked.GetXpathCount(xpath),ToDecimal(expected),false);}
		public String verifyXpathCount(String xpath, Double expected){return InvokeVerify(()=>WebDriverBacked.GetXpathCount(xpath),ToDecimal(expected),true);}
		public String verifyNotXpathCount(String xpath, Double expected){return InvokeVerify(()=>WebDriverBacked.GetXpathCount(xpath),ToDecimal(expected),false);}
		public void waitForXpathCount(String xpath, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetXpathCount(xpath),ToDecimal(expected),true);}
		public void waitForNotXpathCount(String xpath, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetXpathCount(xpath),ToDecimal(expected),false);}
		/// <summary>Returns the number of nodes that match the specified css, eg. \"css=table\" would give the number of tables. the css path expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.the number of nodes that match the specified css locator</summary>
		public Double getCssCount(String cssLocator){return ToDouble(InvokeReturn(()=>WebDriverBacked.GetCSSCount(cssLocator)));}
		public void assertCssCount(String cssLocator, Double expected){InvokeAssert(()=>WebDriverBacked.GetCSSCount(cssLocator),ToDecimal(expected),true);}
		public void assertNotCssCount(String cssLocator, Double expected){InvokeAssert(()=>WebDriverBacked.GetCSSCount(cssLocator),ToDecimal(expected),false);}
		public String verifyCssCount(String cssLocator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetCSSCount(cssLocator),ToDecimal(expected),true);}
		public String verifyNotCssCount(String cssLocator, Double expected){return InvokeVerify(()=>WebDriverBacked.GetCSSCount(cssLocator),ToDecimal(expected),false);}
		public void waitForCssCount(String cssLocator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetCSSCount(cssLocator),ToDecimal(expected),true);}
		public void waitForNotCssCount(String cssLocator, Double expected){InvokeWaitFor(()=>WebDriverBacked.GetCSSCount(cssLocator),ToDecimal(expected),false);}
		/// <summary>Temporarily sets the \"id\" attribute of the specified element, so you can locate it in the future using its ID rather than a slow/complicated XPath. This ID will disappear once the page is reloaded. an element locator pointing to an elementa string to be used as the ID of the specified element</summary>
		public void assignId(String locator, String identifier){InvokeVoid(()=>WebDriverBacked.AssignId(locator, identifier));}
		public void assignIdAndWait(String locator, String identifier){InvokeAndWait(()=>WebDriverBacked.AssignId(locator, identifier));}
		/// <summary>Specifies whether Selenium should use the native in-browser implementation of XPath (if any native version is available); if you pass \"false\" to this function, we will always use our pure-JavaScript xpath library. Using the pure-JS xpath library can improve the consistency of xpath element locators between different browser vendors, but the pure-JS version is much slower than the native implementations. boolean, true means we'll prefer to use native XPath; false means we'll only use JS XPath</summary>
		public void allowNativeXpath(String allow){InvokeVoid(()=>WebDriverBacked.AllowNativeXpath(allow));}
		public void allowNativeXpathAndWait(String allow){InvokeAndWait(()=>WebDriverBacked.AllowNativeXpath(allow));}
		/// <summary>Specifies whether Selenium will ignore xpath attributes that have no value, i.e. are the empty string, when using the non-native xpath evaluation engine. You'd want to do this for performance reasons in IE. However, this could break certain xpaths, for example an xpath that looks for an attribute whose value is NOT the empty string. The hope is that such xpaths are relatively rare, but the user should have the option of using them. Note that this only influences xpath evaluation when using the ajaxslt engine (i.e. not \"javascript-xpath\"). boolean, true means we'll ignore attributes without value at the expense of xpath \"correctness\"; false means we'll sacrifice speed for correctness.</summary>
		public void ignoreAttributesWithoutValue(String ignore){InvokeVoid(()=>WebDriverBacked.IgnoreAttributesWithoutValue(ignore));}
		public void ignoreAttributesWithoutValueAndWait(String ignore){InvokeAndWait(()=>WebDriverBacked.IgnoreAttributesWithoutValue(ignore));}
		/// <summary>Runs the specified JavaScript snippet repeatedly until it evaluates to \"true\". The snippet may have multiple lines, but only the result of the last line will be considered. Note that, by default, the snippet will be run in the runner's test window, not in the window of your application. To get the window of your application, you can use the JavaScript snippet selenium.browserbot.getCurrentWindow(), and then run your JavaScript in therethe JavaScript snippet to runa timeout in milliseconds, after which this command will return with an error</summary>
		public void waitForCondition(String script, Object timeoutms){InvokeVoid(()=>WebDriverBacked.WaitForCondition(script, timeoutms.ToString()));}
		/// <summary>Waits for a new page to load. You can use this command instead of the \"AndWait\" suffixes, \"clickAndWait\", \"selectAndWait\", \"typeAndWait\" etc. (which are only available in the JS API).Selenium constantly keeps track of new pages loading, and sets a \"newPageLoaded\" flag when it first notices a page load. Running any other Selenium command after turns the flag to false. Hence, if you want to wait for a page to load, you must wait immediately after a Selenium command that caused a page-load.a timeout in milliseconds, after which this command will return with an error</summary>
		public void waitForPageToLoad(Object timeoutms){InvokeVoid(()=>WebDriverBacked.WaitForPageToLoad(timeoutms.ToString()));}
        #endregion
    }
}
